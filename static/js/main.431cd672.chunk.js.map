{"version":3,"sources":["stores/project/types.ts","utils/api/service.ts","utils/api/codeSendService.ts","hooks/useNotification.tsx","utils/combineReducers.ts","stores/project/reducers.ts","stores/update/types.ts","stores/update/reducers.ts","stores/reducers.ts","stores/index.tsx","hooks/useStore.tsx","stores/project/actions.ts","stores/update/actions.ts","hooks/useProject.tsx","components/container/container.tsx","utils/dateTime.ts","modules/project/projectList.tsx","components/formikWrapper/textField.tsx","components/formikWrapper/fileField.tsx","components/formikWrapper/form.tsx","modules/project/projectForm.tsx","modules/project/index.tsx","modules/project/page.tsx","modules/dashboard/index.tsx","modules/dashboard/page.tsx","hooks/useUpdate.tsx","modules/update/updateLog.tsx","modules/update/updateForm.tsx","modules/update/index.tsx","modules/update/page.tsx","modules/main/page.tsx","modules/main/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ProjectActionTypes","Service","baseURL","this","res","data","status","message","Promise","reject","endpoint","axios","get","then","handleError","post","put","delete","process","REACT_APP_CODE_SEND_SERVICE_URL","service","project","projectId","update","updateId","bundle","formData","FormData","append","useNotification","handleSuccess","useCallback","title","description","notification","success","error","combineReducers","reducers","reducerKeys","Object","keys","reducerValues","values","stateMap","Map","reducersMap","forEach","key","index","set","value","state","action","nextStateForCurrentKey","hasStateChanged","newState","reducerKey","currentReducer","prevStateForCurrentKey","fromEntries","UpdateActionTypes","projectInitialState","items","selected","undefined","loading","prevState","type","payload","GetSuccess","CreateSuccess","Select","GetRequest","CreateRequest","GetError","CreateError","updateInitialState","latest","GetLatestSuccess","GetLatestRequest","GetLatestError","projectStateAndReducers","projectReducers","projectState","updateStateAndReducers","storeContext","createContext","dispatch","Provider","StoreProvider","children","initialState","rootStateAndReducers","rootReducers","rootState","useReducer","providerValue","useStore","useContext","useProjectState","useProjectAction","getProjectRequest","getProjectSuccess","projects","getProjectSuccessAction","getProjectError","getProjectErrorAction","createProjectRequest","createProjectSuccess","createProjectSuccessAction","createProjectError","createProjectErrorAction","selectProject","selectProjectAction","useUpdateState","useUpdateAction","getUpdateRequest","getUpdateSuccess","updates","getUpdateSuccessAction","getUpdateError","getUpdateErrorAction","createUpdateRequest","createUpdateSuccess","Update","createUpdateError","createUpdateErrorAction","getLatestUpdateRequest","getLatestUpdateSuccess","getLatestUpdateSuccessAction","getLatestUpdateError","getLatestUpdateErrorAction","useSelectProject","projectAction","push","useHistory","Container","style","paddingLeft","paddingRight","getFormattedDate","dateTime","moment","format","ProjectList","useEffect","a","codeSendService","useGetAllProject","data-testid","subTitle","to","active","marginTop","gutter","map","item","span","onClick","cursor","Meta","name","createdAt","avatar","AndroidOutlined","fontSize","TextField","label","useField","field","meta","Item","hasFeedback","validateStatus","help","htmlFor","id","FileField","helper","inputFileRef","useRef","isError","handleButtonClick","current","click","handleFileChange","event","selectedFile","target","files","setValue","ref","hidden","onChange","onBlur","marginRight","UploadOutlined","Text","renderMessage","Form","handleSubmit","useFormikContext","onSubmitCapture","layout","validationSchema","yup","shape","required","initialValues","ProjectForm","createProject","projectFormValues","useCreateProject","onSubmit","htmlType","Project","minHeight","Header","justify","strong","color","Content","padding","path","component","render","Dashboard","_id","useGetLatestUpdate","backIcon","version","NumberOutlined","note","InfoCircleOutlined","CalendarOutlined","icon","FrownOutlined","extra","UpdateLog","useGetAllUpdate","columns","useMemo","record","dataIndex","href","bundleUrl","dataSource","UpdateForm","createUpdate","rest","useCreateUpdate","navigationMenuItems","DashboardOutlined","GiftOutlined","ProjectSelector","placeholder","find","minWidth","Option","Navigation","location","selectedKeys","React","findIndex","pathname","includes","toString","height","Main","Sider","App","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.431cd672.chunk.js","sourcesContent":["import { Project } from \"interfaces/Project\";\n\nexport interface ProjectState {\n  items: Project[];\n  selected?: Project;\n  loading: boolean;\n  error?: string;\n}\n\nexport enum ProjectActionTypes {\n  GetRequest = \"@Project/GetRequest\",\n  GetSuccess = \"@Project/GetSuccess\",\n  GetError = \"@Project/GetError\",\n  CreateRequest = \"@Project/CreateRequest\",\n  CreateSuccess = \"@Project/CreateSuccess\",\n  CreateError = \"@Project/CreateError\",\n  Select = \"@Project/Select\"\n}\n","import axios, { AxiosResponse } from \"axios\";\n\nexport default class Service {\n  baseURL: string;\n\n  constructor(baseURL: string) {\n    this.baseURL = baseURL;\n  }\n\n  private handleError(res: AxiosResponse) {\n    const { status, message } = res.data;\n    return status === \"error\" ? Promise.reject(message) : res;\n  }\n\n  public get<T>(endpoint: string) {\n    return axios\n      .get(this.baseURL + endpoint)\n      .then(this.handleError)\n      .then(res => res.data as T);\n  }\n\n  public post<T>(endpoint: string, data: any) {\n    return axios\n      .post(this.baseURL + endpoint, data)\n      .then(this.handleError)\n      .then(res => res.data as T);\n  }\n\n  public put<T>(endpoint: string, data: any) {\n    return axios\n      .put(this.baseURL + endpoint, data)\n      .then(this.handleError)\n      .then(res => res.data as T);\n  }\n\n  public delete<T>(endpoint: string) {\n    return axios\n      .delete(this.baseURL + endpoint)\n      .then(this.handleError)\n      .then(res => res.data as T);\n  }\n}\n","import { ProjectFormValues, Project } from \"interfaces/Project\";\nimport { UpdateFormValues, Update } from \"interfaces/Update\";\nimport Service from \"./service\";\n\nconst baseURL = process.env.REACT_APP_CODE_SEND_SERVICE_URL as string;\nconst service = new Service(baseURL);\n\nconst getallProjects = () => {\n  return service.get<Project[]>(\"/project\");\n};\n\nconst createProject = (project: ProjectFormValues) => {\n  return service.post<Project>(\"/project\", project);\n};\n\nconst getAllUpdates = (projectId: string) => {\n  return service.get<Update[]>(`/project/${projectId}/update`);\n};\n\nconst getLatestUpdate = (projectId: string) => {\n  return service.get<Update>(`/project/${projectId}/update/latest`);\n};\n\nconst createUpdate = (projectId: string, update: UpdateFormValues) => {\n  return service.post<Update>(`/project/${projectId}/update`, update);\n};\n\nconst uploadUpdate = (projectId: string, updateId: string, bundle: Blob) => {\n  const formData = new FormData();\n  formData.append(\"bundle\", bundle);\n  return service.put<Update>(\n    `/project/${projectId}/update/${updateId}/bundle`,\n    formData\n  );\n};\n\nexport default {\n  baseURL,\n  getallProjects,\n  createProject,\n  getAllUpdates,\n  getLatestUpdate,\n  createUpdate,\n  uploadUpdate\n};\n","import { useCallback } from \"react\";\nimport { notification } from \"antd\";\n\nexport const useNotification = () => {\n  const handleSuccess = useCallback((title: string, description: string) => {\n    notification.success({\n      message: title,\n      description\n    });\n  }, []);\n\n  const handleError = useCallback((title: string, description: string) => {\n    notification.error({\n      message: title,\n      description\n    });\n  }, []);\n\n  return {\n    handleSuccess,\n    handleError\n  };\n};\n","import { Reducer } from \"react\";\nimport { Action } from \"interfaces/Action\";\n\ntype Reducers<T extends object> = {\n  [key in keyof T]: [Reducer<T[key], Action>, T[key]];\n};\n\nexport const combineReducers = <T extends object>(\n  reducers: Reducers<T>\n): [Reducer<T, Action>, T] => {\n  type key = keyof T;\n\n  const reducerKeys = (Object.keys(reducers) as unknown) as [key];\n  const reducerValues = Object.values(reducers) as [\n    Reducer<T[key], Action>,\n    T[key]\n  ][];\n\n  const stateMap = new Map<keyof T, T[key]>();\n  const reducersMap = new Map<keyof T, Reducer<T[key], Action>>();\n\n  reducerKeys.forEach((key, index) => {\n    stateMap.set(key, reducerValues[index][1]);\n  });\n\n  reducerValues.forEach((value, index) => {\n    reducersMap.set(reducerKeys[index], value[0]);\n  });\n\n  return [\n    (state: T, action: Action) => {\n      let hasStateChanged = false;\n      const newState = new Map<keyof T, T[key]>();\n      let nextStateForCurrentKey: T[keyof T];\n\n      reducerKeys.forEach(reducerKey => {\n        const currentReducer = reducersMap.get(reducerKey)!;\n        const prevStateForCurrentKey = state[reducerKey];\n\n        nextStateForCurrentKey = currentReducer(prevStateForCurrentKey, action);\n        hasStateChanged =\n          hasStateChanged || nextStateForCurrentKey !== prevStateForCurrentKey;\n        newState.set(reducerKey, nextStateForCurrentKey);\n      });\n\n      return hasStateChanged ? (Object.fromEntries(newState) as T) : state;\n    },\n    Object.fromEntries(stateMap) as T\n  ];\n};\n","import { Reducer } from \"react\";\nimport { Action } from \"interfaces/Action\";\nimport { ProjectState, ProjectActionTypes } from \"./types\";\nimport { combineReducers } from \"utils/combineReducers\";\n\nexport const projectInitialState: ProjectState = {\n  items: [],\n  selected: undefined,\n  loading: false,\n  error: undefined\n};\n\nconst itemsReducer: Reducer<ProjectState[\"items\"], Action> = (\n  prevState,\n  { type, payload }\n) => {\n  switch (type) {\n    case ProjectActionTypes.GetSuccess:\n      return [...payload];\n    case ProjectActionTypes.CreateSuccess:\n      return [...prevState, payload];\n    default:\n      return prevState;\n  }\n};\n\nconst selectedReducer: Reducer<ProjectState[\"selected\"], Action> = (\n  prevState,\n  { type, payload }\n) => {\n  switch (type) {\n    case ProjectActionTypes.Select:\n      return payload;\n    default:\n      return prevState;\n  }\n};\n\nconst loadingReducer: Reducer<ProjectState[\"loading\"], Action> = (\n  prevState,\n  { type }\n) => {\n  switch (type) {\n    case ProjectActionTypes.GetRequest:\n    case ProjectActionTypes.CreateRequest:\n      return true;\n    case ProjectActionTypes.GetSuccess:\n    case ProjectActionTypes.GetError:\n    case ProjectActionTypes.CreateSuccess:\n    case ProjectActionTypes.CreateError:\n      return false;\n    default:\n      return prevState;\n  }\n};\n\nconst errorReducer: Reducer<ProjectState[\"error\"], Action> = (\n  prevState,\n  { type, payload }\n) => {\n  switch (type) {\n    case ProjectActionTypes.GetError:\n    case ProjectActionTypes.CreateError:\n      return payload;\n    case ProjectActionTypes.GetSuccess:\n    case ProjectActionTypes.CreateSuccess:\n      return undefined;\n    default:\n      return prevState;\n  }\n};\n\nexport default combineReducers<ProjectState>({\n  items: [itemsReducer, projectInitialState[\"items\"]],\n  selected: [selectedReducer, projectInitialState[\"selected\"]],\n  loading: [loadingReducer, projectInitialState[\"loading\"]],\n  error: [errorReducer, projectInitialState[\"error\"]]\n});\n","import { Update } from \"interfaces/Update\";\n\nexport interface UpdateState {\n  items: Update[];\n  latest?: Update;\n  loading: boolean;\n  error?: string;\n}\n\nexport enum UpdateActionTypes {\n  GetRequest = \"@Update/GetRequest\",\n  GetSuccess = \"@Update/GetSuccess\",\n  GetError = \"@Update/GetError\",\n  CreateRequest = \"@Update/CreateRequest\",\n  CreateSuccess = \"@Update/CreateSuccess\",\n  CreateError = \"@Update/CreateError\",\n  GetLatestRequest = \"@Update/GetLatestRequest\",\n  GetLatestSuccess = \"@Update/GetLatestSuccess\",\n  GetLatestError = \"@Update/GetLatestError\"\n}\n","import { Reducer } from \"react\";\nimport { Action } from \"interfaces/Action\";\nimport { UpdateState, UpdateActionTypes } from \"./types\";\nimport { combineReducers } from \"utils/combineReducers\";\n\nexport const updateInitialState: UpdateState = {\n  items: [],\n  latest: undefined,\n  loading: false,\n  error: undefined\n};\n\nconst itemsReducer: Reducer<UpdateState[\"items\"], Action> = (\n  prevState,\n  { type, payload }\n) => {\n  switch (type) {\n    case UpdateActionTypes.GetSuccess:\n      return [...payload];\n    case UpdateActionTypes.CreateSuccess:\n      return [...prevState, payload];\n    default:\n      return prevState;\n  }\n};\n\nconst latestReducer: Reducer<UpdateState[\"latest\"], Action> = (\n  prevState,\n  { type, payload }\n) => {\n  switch (type) {\n    case UpdateActionTypes.GetLatestSuccess:\n      return payload;\n    default:\n      return prevState;\n  }\n};\n\nconst loadingReducer: Reducer<UpdateState[\"loading\"], Action> = (\n  prevState,\n  { type }\n) => {\n  switch (type) {\n    case UpdateActionTypes.GetRequest:\n    case UpdateActionTypes.CreateRequest:\n    case UpdateActionTypes.GetLatestRequest:\n      return true;\n    case UpdateActionTypes.GetSuccess:\n    case UpdateActionTypes.GetError:\n    case UpdateActionTypes.CreateSuccess:\n    case UpdateActionTypes.CreateError:\n    case UpdateActionTypes.GetLatestSuccess:\n    case UpdateActionTypes.GetLatestError:\n      return false;\n    default:\n      return prevState;\n  }\n};\n\nconst errorReducer: Reducer<UpdateState[\"error\"], Action> = (\n  prevState,\n  { type, payload }\n) => {\n  switch (type) {\n    case UpdateActionTypes.GetError:\n    case UpdateActionTypes.CreateError:\n    case UpdateActionTypes.GetLatestError:\n      return payload;\n    case UpdateActionTypes.GetSuccess:\n    case UpdateActionTypes.CreateSuccess:\n    case UpdateActionTypes.GetLatestSuccess:\n      return undefined;\n    default:\n      return prevState;\n  }\n};\n\nexport default combineReducers<UpdateState>({\n  items: [itemsReducer, updateInitialState[\"items\"]],\n  latest: [latestReducer, updateInitialState[\"latest\"]],\n  loading: [loadingReducer, updateInitialState[\"loading\"]],\n  error: [errorReducer, updateInitialState[\"error\"]]\n});\n","import { combineReducers } from \"utils/combineReducers\";\nimport projectStateAndReducers from \"./project/reducers\";\nimport updateStateAndReducers from \"./update/reducers\";\nimport { RootState } from \"./types\";\n\nconst [projectReducers, projectState] = projectStateAndReducers;\nconst [updateReducers, updateState] = updateStateAndReducers;\nexport default combineReducers<RootState>({\n  project: [projectReducers, projectState],\n  update: [updateReducers, updateState]\n});\n","import React, {\n  useReducer,\n  createContext,\n  Dispatch,\n  FunctionComponent\n} from \"react\";\nimport rootStateAndReducers from \"./reducers\";\nimport { RootState } from \"./types\";\nimport { Action } from \"interfaces/Action\";\nimport { projectInitialState } from \"./project/reducers\";\nimport { updateInitialState } from \"./update/reducers\";\n\ninterface RootContextValue {\n  state: RootState;\n  dispatch: Dispatch<Action>;\n}\n\nexport const storeContext = createContext<RootContextValue>({\n  state: {\n    project: projectInitialState,\n    update: updateInitialState\n  },\n  dispatch: () => null\n});\n\nconst { Provider } = storeContext;\n\ninterface StoreProviderProps {\n  initialState?: Partial<RootState>;\n}\n\nexport const StoreProvider: FunctionComponent<StoreProviderProps> = ({\n  children,\n  initialState\n}) => {\n  const [rootReducers, rootState] = rootStateAndReducers;\n  const [state, dispatch] = useReducer(rootReducers, rootState);\n  const providerValue = {\n    state: { ...state, ...initialState },\n    dispatch\n  };\n  return <Provider value={providerValue}>{children}</Provider>;\n};\n","import { useContext, useCallback } from \"react\";\nimport { storeContext } from \"stores\";\nimport {\n  getProjectRequestAction,\n  getProjectSuccessAction,\n  getProjectErrorAction,\n  createProjectRequestAction,\n  createProjectSuccessAction,\n  createProjectErrorAction,\n  selectProjectAction\n} from \"stores/project/actions\";\nimport { Project } from \"interfaces/Project\";\nimport {\n  getUpdateRequestAction,\n  getUpdateSuccessAction,\n  getUpdateErrorAction,\n  createUpdateRequestAction,\n  createUpdateSuccessAction,\n  createUpdateErrorAction,\n  getLatestUpdateRequestAction,\n  getLatestUpdateSuccessAction,\n  getLatestUpdateErrorAction\n} from \"stores/update/actions\";\nimport { Update } from \"interfaces/Update\";\n\nexport const useStore = () => {\n  const store = useContext(storeContext);\n  return store;\n};\n\nexport const useProjectState = () => {\n  const {\n    state: { project }\n  } = useStore();\n  return project;\n};\n\nexport const useProjectAction = () => {\n  const { dispatch } = useStore();\n\n  const getProjectRequest = useCallback(\n    () => dispatch(getProjectRequestAction()),\n    [dispatch]\n  );\n\n  const getProjectSuccess = useCallback(\n    (projects: Project[]) => dispatch(getProjectSuccessAction(projects)),\n    [dispatch]\n  );\n\n  const getProjectError = useCallback(\n    (error: string) => dispatch(getProjectErrorAction(error)),\n    [dispatch]\n  );\n\n  const createProjectRequest = useCallback(\n    () => dispatch(createProjectRequestAction()),\n    [dispatch]\n  );\n\n  const createProjectSuccess = useCallback(\n    (project: Project) => dispatch(createProjectSuccessAction(project)),\n    [dispatch]\n  );\n\n  const createProjectError = useCallback(\n    (error: string) => dispatch(createProjectErrorAction(error)),\n    [dispatch]\n  );\n\n  const selectProject = useCallback(\n    (project: Project) => dispatch(selectProjectAction(project)),\n    [dispatch]\n  );\n\n  return {\n    getProjectRequest,\n    getProjectSuccess,\n    getProjectError,\n    createProjectRequest,\n    createProjectSuccess,\n    createProjectError,\n    selectProject\n  };\n};\n\nexport const useUpdateState = () => {\n  const {\n    state: { update }\n  } = useStore();\n  return update;\n};\n\nexport const useUpdateAction = () => {\n  const { dispatch } = useStore();\n\n  const getUpdateRequest = useCallback(\n    () => dispatch(getUpdateRequestAction()),\n    [dispatch]\n  );\n\n  const getUpdateSuccess = useCallback(\n    (updates: Update[]) => dispatch(getUpdateSuccessAction(updates)),\n    [dispatch]\n  );\n\n  const getUpdateError = useCallback(\n    (error: string) => dispatch(getUpdateErrorAction(error)),\n    [dispatch]\n  );\n\n  const createUpdateRequest = useCallback(\n    () => dispatch(createUpdateRequestAction()),\n    [dispatch]\n  );\n\n  const createUpdateSuccess = useCallback(\n    (Update: Update) => dispatch(createUpdateSuccessAction(Update)),\n    [dispatch]\n  );\n\n  const createUpdateError = useCallback(\n    (error: string) => dispatch(createUpdateErrorAction(error)),\n    [dispatch]\n  );\n\n  const getLatestUpdateRequest = useCallback(\n    () => dispatch(getLatestUpdateRequestAction()),\n    [dispatch]\n  );\n\n  const getLatestUpdateSuccess = useCallback(\n    (update: Update) => dispatch(getLatestUpdateSuccessAction(update)),\n    [dispatch]\n  );\n\n  const getLatestUpdateError = useCallback(\n    (error: string) => dispatch(getLatestUpdateErrorAction(error)),\n    [dispatch]\n  );\n\n  return {\n    getUpdateRequest,\n    getUpdateSuccess,\n    getUpdateError,\n    createUpdateRequest,\n    createUpdateSuccess,\n    createUpdateError,\n    getLatestUpdateRequest,\n    getLatestUpdateSuccess,\n    getLatestUpdateError\n  };\n};\n","import { action } from \"typesafe-actions\";\nimport { ProjectActionTypes } from \"./types\";\nimport { Project } from \"interfaces/Project\";\n\nexport const getProjectRequestAction = () => {\n  return action(ProjectActionTypes.GetRequest);\n};\n\nexport const getProjectSuccessAction = (projects: Project[]) => {\n  return action(ProjectActionTypes.GetSuccess, projects);\n};\n\nexport const getProjectErrorAction = (error: string) => {\n  return action(ProjectActionTypes.GetError, error);\n};\n\nexport const createProjectRequestAction = () => {\n  return action(ProjectActionTypes.CreateRequest);\n};\n\nexport const createProjectSuccessAction = (project: Project) => {\n  return action(ProjectActionTypes.CreateSuccess, project);\n};\n\nexport const createProjectErrorAction = (error: string) => {\n  return action(ProjectActionTypes.CreateError, error);\n};\n\nexport const selectProjectAction = (project: Project) => {\n  return action(ProjectActionTypes.Select, project);\n};\n","import { action } from \"typesafe-actions\";\nimport { UpdateActionTypes } from \"./types\";\nimport { Update } from \"interfaces/Update\";\n\nexport const getUpdateRequestAction = () => {\n  return action(UpdateActionTypes.GetRequest);\n};\n\nexport const getUpdateSuccessAction = (updates: Update[]) => {\n  return action(UpdateActionTypes.GetSuccess, updates);\n};\n\nexport const getUpdateErrorAction = (error: string) => {\n  return action(UpdateActionTypes.GetError, error);\n};\n\nexport const createUpdateRequestAction = () => {\n  return action(UpdateActionTypes.CreateRequest);\n};\n\nexport const createUpdateSuccessAction = (update: Update) => {\n  return action(UpdateActionTypes.CreateSuccess, update);\n};\n\nexport const createUpdateErrorAction = (error: string) => {\n  return action(UpdateActionTypes.CreateError, error);\n};\n\nexport const getLatestUpdateRequestAction = () => {\n  return action(UpdateActionTypes.GetLatestRequest);\n};\n\nexport const getLatestUpdateSuccessAction = (update: Update) => {\n  return action(UpdateActionTypes.GetLatestSuccess, update);\n};\n\nexport const getLatestUpdateErrorAction = (error: string) => {\n  return action(UpdateActionTypes.GetLatestError, error);\n};\n","import { useEffect } from \"react\";\nimport { ProjectFormValues, Project } from \"interfaces/Project\";\nimport codeSendService from \"utils/api/codeSendService\";\nimport { useNotification } from \"hooks/useNotification\";\nimport { useProjectState, useProjectAction } from \"./useStore\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const useGetAllProject = () => {\n  const { items, loading, error } = useProjectState();\n  const {\n    getProjectRequest,\n    getProjectSuccess,\n    getProjectError\n  } = useProjectAction();\n  const { handleError } = useNotification();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        getProjectRequest();\n        const projects = await codeSendService.getallProjects();\n        getProjectSuccess(projects);\n      } catch (error) {\n        getProjectError(error.message);\n        handleError(\"Failed\", error.message);\n      }\n    })();\n  }, [getProjectRequest, getProjectSuccess, getProjectError, handleError]);\n\n  return { items, loading, error };\n};\n\nexport const useCreateProject = () => {\n  const { loading, error } = useProjectState();\n  const {\n    createProjectRequest,\n    createProjectSuccess,\n    createProjectError\n  } = useProjectAction();\n  const { handleSuccess, handleError } = useNotification();\n  const { push } = useHistory();\n\n  const createProject = async (projectFormValues: ProjectFormValues) => {\n    try {\n      createProjectRequest();\n      const project = await codeSendService.createProject(projectFormValues);\n      createProjectSuccess(project);\n      handleSuccess(\"Success\", \"Your project is successfully created\");\n      push(\"/project\");\n    } catch (error) {\n      createProjectError(error.message);\n      handleError(\"Failed\", error.message);\n    }\n  };\n\n  return {\n    createProject,\n    loading,\n    error\n  };\n};\n\nexport const useSelectProject = () => {\n  const projectAction = useProjectAction();\n  const { push } = useHistory();\n\n  const selectProject = (project: Project) => {\n    projectAction.selectProject(project);\n    push(\"/dashboard\");\n  };\n\n  return { selectProject };\n};\n","import React, { FunctionComponent } from \"react\";\n\nconst Container: FunctionComponent = ({ children }) => {\n  return <div style={{ paddingLeft: 24, paddingRight: 24 }}>{children}</div>;\n};\n\nexport default Container;\n","import moment from \"moment\";\n\nexport const getFormattedDate = (dateTime: string) => {\n  return moment(dateTime).format(\"L\");\n};\n","import React from \"react\";\nimport { Button, Skeleton, PageHeader, Card, Row, Col } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport { useGetAllProject, useSelectProject } from \"hooks/useProject\";\nimport { AndroidOutlined } from \"@ant-design/icons\";\nimport Container from \"components/container\";\nimport { getFormattedDate } from \"utils/dateTime\";\n\nconst ProjectList: React.FC = () => {\n  const { items, loading } = useGetAllProject();\n  const { selectProject } = useSelectProject();\n\n  return (\n    <div data-testid=\"page-project-list\">\n      <PageHeader title=\"Projects\" subTitle=\"Show your project list\" />\n\n      <Container>\n        <Link to=\"/project/create\">\n          <Button type=\"primary\">Create New Project</Button>\n        </Link>\n\n        <Skeleton loading={loading} active>\n          <Row style={{ marginTop: 15 }} gutter={[15, 15]}>\n            {items.map((item, index) => (\n              <Col span={6} key={index}>\n                <Card\n                  onClick={() => selectProject(item)}\n                  style={{ cursor: \"pointer\" }}\n                >\n                  <Card.Meta\n                    title={item.name}\n                    description={getFormattedDate(item.createdAt)}\n                    avatar={<AndroidOutlined style={{ fontSize: 30 }} />}\n                  />\n                </Card>\n              </Col>\n            ))}\n          </Row>\n        </Skeleton>\n      </Container>\n    </div>\n  );\n};\n\nexport default ProjectList;\n","import React from \"react\";\nimport { Input, Form } from \"antd\";\nimport { useField } from \"formik\";\n\ninterface TextFieldProps {\n  label: string;\n  name: string;\n}\n\nexport const TextField: React.FC<TextFieldProps> = ({ name, label }) => {\n  const [field, meta] = useField({ name });\n  return (\n    <Form.Item\n      label={label}\n      hasFeedback\n      validateStatus={meta.error && \"error\"}\n      help={meta.error}\n      htmlFor={name}\n    >\n      <Input {...field} id={name} />\n    </Form.Item>\n  );\n};\n","import React, { useRef } from \"react\";\nimport { Form, Button, Typography } from \"antd\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport { useField } from \"formik\";\n\ninterface FileFieldProps {\n  label: string;\n  name: string;\n}\n\nexport const FileField: React.FC<FileFieldProps> = ({ label, name }) => {\n  const [field, meta, helper] = useField<File>({ name });\n  const inputFileRef = useRef<HTMLInputElement>(null);\n\n  const isError = () => {\n    return meta.error !== undefined;\n  };\n\n  const handleButtonClick = () => {\n    inputFileRef.current?.click();\n  };\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = event.target.files && event.target.files[0];\n    helper.setValue(selectedFile!);\n  };\n\n  const renderInput = () => {\n    return (\n      <input\n        id={name}\n        type=\"file\"\n        ref={inputFileRef}\n        hidden\n        onChange={handleFileChange}\n        onBlur={field.onBlur}\n      />\n    );\n  };\n\n  const renderButton = () => {\n    return (\n      <Button onClick={handleButtonClick} style={{ marginRight: 15 }}>\n        <UploadOutlined /> Choose File\n      </Button>\n    );\n  };\n\n  const renderMessage = () => {\n    const message = isError()\n      ? meta.error\n      : field.value\n      ? field.value.name\n      : \"\";\n\n    return (\n      <Typography.Text type={isError() ? \"danger\" : \"secondary\"}>\n        {message}\n      </Typography.Text>\n    );\n  };\n\n  return (\n    <Form.Item label={label} htmlFor={name}>\n      {renderInput()}\n      {renderButton()}\n      {renderMessage()}\n    </Form.Item>\n  );\n};\n","import React from \"react\";\nimport { Form as AntdForm } from \"antd\";\nimport { useFormikContext } from \"formik\";\n\nexport const Form: React.FC = ({ children }) => {\n  const { handleSubmit } = useFormikContext();\n  return (\n    <AntdForm onSubmitCapture={handleSubmit} layout=\"vertical\">\n      {children}\n    </AntdForm>\n  );\n};\n","import React from \"react\";\nimport { TextField, Form } from \"components/formikWrapper\";\nimport { ProjectFormValues } from \"interfaces/Project\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport { Button, PageHeader } from \"antd\";\nimport { useCreateProject } from \"hooks/useProject\";\nimport Container from \"components/container\";\n\nconst validationSchema = yup.object().shape({\n  name: yup.string().required()\n});\n\nconst initialValues: ProjectFormValues = {\n  name: \"\"\n};\n\nconst ProjectForm: React.FC = () => {\n  const { createProject, loading } = useCreateProject();\n\n  return (\n    <div data-testid=\"page-project-form\">\n      <PageHeader title=\"Create Project\" subTitle=\"Create your new project\" />\n      <Container>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={validationSchema}\n          onSubmit={createProject}\n        >\n          <Form>\n            <TextField name=\"name\" label=\"Name\" />\n            <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n              Submit\n            </Button>\n          </Form>\n        </Formik>\n      </Container>\n    </div>\n  );\n};\n\nexport default ProjectForm;\n","import Project from \"./page\";\nexport default Project;\n","import React from \"react\";\nimport { Route, Redirect, Switch, Link } from \"react-router-dom\";\nimport ProjectList from \"./projectList\";\nimport ProjectForm from \"./projectForm\";\nimport { Layout, Row, Col, Typography } from \"antd\";\n\nconst Page: React.FC = () => {\n  return (\n    <div data-testid=\"page-project\">\n      <Layout style={{ minHeight: \"100vh\" }}>\n        <Layout.Header>\n          <Row justify=\"space-between\">\n            <Col>\n              <Link to=\"/project\">\n                <Typography.Text strong style={{ color: \"white\" }}>\n                  Code Send\n                </Typography.Text>\n              </Link>\n            </Col>\n          </Row>\n        </Layout.Header>\n        <Layout>\n          <Layout.Content style={{ padding: \"30px\" }}>\n            <Switch>\n              <Route path=\"/project/list\" component={ProjectList} />\n              <Route path=\"/project/create\" component={ProjectForm} />\n              <Route render={() => <Redirect to=\"/project/list\" />} />\n            </Switch>\n          </Layout.Content>\n        </Layout>\n      </Layout>\n    </div>\n  );\n};\n\nexport default Page;\n","import Dashboard from \"./page\";\nexport default Dashboard;\n","import React from \"react\";\nimport { Card, Row, Col, PageHeader, Skeleton, Result, Button } from \"antd\";\nimport {\n  NumberOutlined,\n  InfoCircleOutlined,\n  CalendarOutlined,\n  FrownOutlined\n} from \"@ant-design/icons\";\nimport { useGetLatestUpdate } from \"hooks/useUpdate\";\nimport Container from \"components/container\";\nimport { getFormattedDate } from \"utils/dateTime\";\nimport { Link } from \"react-router-dom\";\n\nconst Page: React.FC = () => {\n  const { latest, loading } = useGetLatestUpdate();\n\n  return (\n    <div data-testid=\"page-dashboard\">\n      <PageHeader\n        title=\"Latest Update\"\n        subTitle=\"Show your latest update information\"\n        backIcon\n      />\n\n      <Container>\n        {latest ? (\n          <Row gutter={16}>\n            <Col span=\"8\">\n              <Card>\n                <Skeleton avatar loading={loading} active>\n                  <Card.Meta\n                    title=\"Version\"\n                    description={latest.version}\n                    avatar={<NumberOutlined />}\n                  />\n                </Skeleton>\n              </Card>\n            </Col>\n\n            <Col span=\"8\">\n              <Card>\n                <Skeleton avatar loading={loading} active>\n                  <Card.Meta\n                    title=\"Note\"\n                    description={latest.note}\n                    avatar={<InfoCircleOutlined />}\n                  />\n                </Skeleton>\n              </Card>\n            </Col>\n\n            <Col span=\"8\">\n              <Card>\n                <Skeleton avatar loading={loading} active>\n                  <Card.Meta\n                    title=\"Release Date\"\n                    description={getFormattedDate(latest.createdAt)}\n                    avatar={<CalendarOutlined />}\n                  />\n                </Skeleton>\n              </Card>\n            </Col>\n          </Row>\n        ) : (\n          <Card>\n            <Result\n              icon={<FrownOutlined />}\n              title=\"You Have No Update !\"\n              subTitle=\"Create one and start developing your application\"\n              extra={\n                <Link to=\"/update/create\">\n                  <Button type=\"primary\">Create Update Now</Button>\n                </Link>\n              }\n            />\n          </Card>\n        )}\n      </Container>\n    </div>\n  );\n};\n\nexport default Page;\n","import { useEffect } from \"react\";\nimport { UpdateFormValues } from \"interfaces/Update\";\nimport codeSendService from \"utils/api/codeSendService\";\nimport { useNotification } from \"./useNotification\";\nimport { useUpdateState, useProjectState, useUpdateAction } from \"./useStore\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const useGetAllUpdate = () => {\n  const { items, loading, error } = useUpdateState();\n  const project = useProjectState();\n  const {\n    getUpdateRequest,\n    getUpdateSuccess,\n    getUpdateError\n  } = useUpdateAction();\n  const { handleError } = useNotification();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        getUpdateRequest();\n        const updates = await codeSendService.getAllUpdates(\n          project.selected?._id || \"\"\n        );\n        getUpdateSuccess(updates);\n      } catch (error) {\n        getUpdateError(error.message);\n        handleError(\"Failed\", error.message);\n      }\n    })();\n  }, [\n    getUpdateRequest,\n    getUpdateSuccess,\n    getUpdateError,\n    handleError,\n    project.selected\n  ]);\n\n  return { items, loading, error };\n};\n\nexport const useGetLatestUpdate = () => {\n  const { latest, loading, error } = useUpdateState();\n  const project = useProjectState();\n  const {\n    getLatestUpdateRequest,\n    getLatestUpdateSuccess,\n    getLatestUpdateError\n  } = useUpdateAction();\n  const { handleError } = useNotification();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        getLatestUpdateRequest();\n        const update = await codeSendService.getLatestUpdate(\n          project.selected?._id || \"\"\n        );\n        getLatestUpdateSuccess(update);\n      } catch (error) {\n        getLatestUpdateError(error.message);\n        handleError(\"Failed\", error.message);\n      }\n    })();\n  }, [\n    getLatestUpdateRequest,\n    getLatestUpdateSuccess,\n    getLatestUpdateError,\n    handleError,\n    project.selected\n  ]);\n\n  return { latest, loading, error };\n};\n\nexport const useCreateUpdate = () => {\n  const { loading, error } = useUpdateState();\n  const project = useProjectState();\n  const {\n    createUpdateRequest,\n    createUpdateSuccess,\n    createUpdateError\n  } = useUpdateAction();\n  const { handleError, handleSuccess } = useNotification();\n  const { push } = useHistory();\n\n  const createUpdate = async ({ bundle, ...rest }: UpdateFormValues) => {\n    try {\n      createUpdateRequest();\n      let update = await codeSendService.createUpdate(\n        project.selected?._id || \"\",\n        rest\n      );\n      update = await codeSendService.uploadUpdate(\n        project.selected?._id || \"\",\n        update._id,\n        bundle!\n      );\n      createUpdateSuccess(update);\n      handleSuccess(\"Success\", \"Your update is successfully created\");\n      push(\"/update\");\n    } catch (error) {\n      createUpdateError(error.message);\n      handleError(\"Failed\", error.message);\n    }\n  };\n\n  return {\n    createUpdate,\n    loading,\n    error\n  };\n};\n","import React, { useMemo } from \"react\";\nimport { Button, Table, PageHeader } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport { useGetAllUpdate } from \"hooks/useUpdate\";\nimport Container from \"components/container\";\nimport { ColumnType } from \"antd/lib/table\";\nimport { Update } from \"interfaces/Update\";\nimport { getFormattedDate } from \"utils/dateTime\";\n\nconst UpdateLog: React.FC = () => {\n  const { items, loading } = useGetAllUpdate();\n\n  const columns = useMemo((): ColumnType<Update>[] => {\n    return [\n      {\n        title: \"Relase Date\",\n        render: (value, record) => (\n          <span>{getFormattedDate(record.createdAt)}</span>\n        )\n      },\n      {\n        title: \"Version\",\n        dataIndex: \"version\"\n      },\n      {\n        title: \"Note\",\n        dataIndex: \"note\"\n      },\n      {\n        title: \"\",\n        render: (value, record) => (\n          <Button href={record.bundleUrl}>Download Bundle</Button>\n        )\n      }\n    ];\n  }, []);\n\n  return (\n    <div data-testid=\"page-update-log\">\n      <PageHeader title=\"Update Logs\" subTitle=\"Show your update logs\" />\n\n      <Container>\n        <Link to=\"/update/create\">\n          <Button type=\"primary\">Create New Update</Button>\n        </Link>\n\n        <Table\n          dataSource={items}\n          columns={columns}\n          style={{ marginTop: 15 }}\n          data-testid=\"table-update-log\"\n          loading={loading}\n        />\n      </Container>\n    </div>\n  );\n};\n\nexport default UpdateLog;\n","import React from \"react\";\nimport { TextField, Form, FileField } from \"components/formikWrapper\";\nimport { UpdateFormValues } from \"interfaces/Update\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport { Button, PageHeader } from \"antd\";\nimport { useCreateUpdate } from \"hooks/useUpdate\";\nimport Container from \"components/container\";\n\nconst validationSchema = yup.object().shape({\n  version: yup.string().required(),\n  note: yup.string().required(),\n  bundle: yup.mixed().required()\n});\n\nconst initialValues: UpdateFormValues = {\n  version: \"\",\n  note: \"\"\n};\n\nconst UpdateForm: React.FC = () => {\n  const { createUpdate, loading } = useCreateUpdate();\n\n  return (\n    <div data-testid=\"page-update-form\">\n      <PageHeader\n        title=\"Create Update\"\n        subTitle=\"Create and realease your new update\"\n      />\n\n      <Container>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={validationSchema}\n          onSubmit={createUpdate}\n        >\n          <Form>\n            <TextField name=\"version\" label=\"Version\" />\n            <TextField name=\"note\" label=\"Note\" />\n            <FileField name=\"bundle\" label=\"Bundle\" />\n            <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n              Submit\n            </Button>\n          </Form>\n        </Formik>\n      </Container>\n    </div>\n  );\n};\n\nexport default UpdateForm;\n","import Update from \"./page\";\nexport default Update;\n","import React from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport UpdateLog from \"./updateLog\";\nimport UpdateForm from \"./updateForm\";\n\nconst Page: React.FC = () => {\n  return (\n    <div data-testid=\"page-update\">\n      <Switch>\n        <Route path=\"/update/log\" component={UpdateLog} />\n        <Route path=\"/update/create\" component={UpdateForm} />\n        <Route render={() => <Redirect to=\"/update/log\" />} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default Page;\n","import React from \"react\";\nimport { Menu, Layout, Row, Col, Typography, Select } from \"antd\";\nimport { DashboardOutlined, GiftOutlined } from \"@ant-design/icons\";\nimport { Route, Redirect, Link, Switch, useHistory } from \"react-router-dom\";\nimport Dashboard from \"modules/dashboard\";\nimport Update from \"modules/update\";\nimport { NavigationMenuItem } from \"interfaces/Navigation\";\nimport { useProjectState } from \"hooks/useStore\";\nimport { useSelectProject } from \"hooks/useProject\";\n\nconst navigationMenuItems: NavigationMenuItem[] = [\n  {\n    path: \"/dashboard\",\n    component: Dashboard,\n    title: \"Dashboard\",\n    icon: <DashboardOutlined />\n  },\n  {\n    path: \"/update\",\n    component: Update,\n    title: \"Update\",\n    icon: <GiftOutlined />\n  }\n];\n\nconst ProjectSelector = () => {\n  const { items, selected } = useProjectState();\n  const { selectProject } = useSelectProject();\n\n  const handleChange = (value: string) => {\n    const project = items.find(item => item._id === value);\n    if (project) selectProject(project);\n  };\n\n  return (\n    <Select\n      placeholder=\"Select Project\"\n      value={selected?._id}\n      onChange={handleChange}\n      style={{ minWidth: 130 }}\n    >\n      {items.map((item, index) => (\n        <Select.Option key={index} value={item._id}>\n          {item.name}\n        </Select.Option>\n      ))}\n    </Select>\n  );\n};\n\nconst Navigation = () => {\n  const { location } = useHistory();\n\n  const selectedKeys = React.useMemo(() => {\n    const key = navigationMenuItems\n      .findIndex(({ path }) => location.pathname.includes(path))\n      .toString();\n    return [key];\n  }, [location.pathname]);\n\n  return (\n    <Menu style={{ height: \"100%\" }} selectedKeys={selectedKeys}>\n      {navigationMenuItems.map(({ path, title, icon }, index) => (\n        <Menu.Item key={index}>\n          <Link to={path}>\n            {icon}\n            {title}\n          </Link>\n        </Menu.Item>\n      ))}\n    </Menu>\n  );\n};\n\nconst Content = () => {\n  return (\n    <Switch>\n      {navigationMenuItems.map(({ path, component }, index) => (\n        <Route key={index} path={path} component={component} />\n      ))}\n      <Redirect to={navigationMenuItems[0].path} />\n    </Switch>\n  );\n};\n\nconst Page: React.FC = () => {\n  const { selected } = useProjectState();\n  return selected ? (\n    <Layout style={{ minHeight: \"100vh\" }}>\n      <Layout.Header>\n        <Row justify=\"space-between\">\n          <Col>\n            <Link to=\"/project\">\n              <Typography.Text strong style={{ color: \"white\" }}>\n                Code Send\n              </Typography.Text>\n            </Link>\n          </Col>\n          <Col>\n            <ProjectSelector />\n          </Col>\n        </Row>\n      </Layout.Header>\n      <Layout>\n        <Layout.Sider>\n          <Navigation />\n        </Layout.Sider>\n        <Layout.Content>\n          <Content />\n        </Layout.Content>\n      </Layout>\n    </Layout>\n  ) : (\n    <Redirect to=\"/project\" />\n  );\n};\n\nexport default Page;\n","import Main from \"./page\";\nexport default Main;\n","import React from \"react\";\nimport Project from \"modules/project\";\nimport Main from \"modules/main\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { StoreProvider } from \"stores\";\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <StoreProvider>\n        <Switch>\n          <Route path=\"/project\" component={Project} />\n          <Route path=\"/\" component={Main} />\n        </Switch>\n      </StoreProvider>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"antd/dist/antd.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}