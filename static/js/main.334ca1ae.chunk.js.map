{"version":3,"sources":["matchMedia.mock.ts","stores/project/types.ts","utils/api/service.ts","utils/api/codeSendService.ts","hooks/useNotification.tsx","utils/combineReducers.ts","stores/project/reducers.ts","stores/update/types.ts","stores/update/reducers.ts","stores/reducers.ts","stores/index.tsx","hooks/useStore.tsx","stores/project/actions.ts","stores/update/actions.ts","hooks/useProject.tsx","modules/project/projectList.tsx","components/formikWrapper/textField.tsx","components/formikWrapper/fileField.tsx","components/formikWrapper/form.tsx","modules/project/projectForm.tsx","modules/project/index.tsx","modules/project/page.tsx","modules/dashboard/index.tsx","modules/dashboard/page.tsx","hooks/useUpdate.tsx","modules/update/updateLog.tsx","modules/update/updateForm.tsx","modules/update/index.tsx","modules/update/page.tsx","modules/main/page.tsx","modules/main/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Object","defineProperty","window","writable","value","jest","fn","mockImplementation","query","matches","media","onchange","addListener","removeListener","addEventListener","removeEventListener","dispatchEvent","ProjectActionTypes","Service","baseURL","this","res","data","status","message","Promise","reject","endpoint","axios","get","then","handleError","post","put","delete","process","REACT_APP_CODE_SEND_SERVICE_URL","service","project","projectId","update","updateId","bundle","formData","FormData","append","useNotification","handleSuccess","useCallback","title","description","notification","success","error","combineReducers","reducers","reducerKeys","keys","reducerValues","values","stateMap","Map","reducersMap","forEach","key","index","set","state","action","nextStateForCurrentKey","hasStateChanged","newState","reducerKey","currentReducer","prevStateForCurrentKey","fromEntries","UpdateActionTypes","projectInitialState","items","selected","undefined","loading","prevState","type","payload","GetSuccess","CreateSuccess","Select","GetRequest","CreateRequest","GetError","CreateError","updateInitialState","latest","GetLatestSuccess","GetLatestRequest","GetLatestError","projectStateAndReducers","projectReducers","projectState","updateStateAndReducers","storeContext","createContext","dispatch","Provider","StoreProvider","children","rootStateAndReducers","rootReducers","rootState","useReducer","useStore","useContext","useProjectState","useProjectAction","getProjectRequest","getProjectSuccess","projects","getProjectSuccessAction","getProjectError","getProjectErrorAction","createProjectRequest","createProjectSuccess","createProjectSuccessAction","createProjectError","createProjectErrorAction","selectProject","selectProjectAction","useUpdateState","useUpdateAction","getUpdateRequest","getUpdateSuccess","updates","getUpdateSuccessAction","getUpdateError","getUpdateErrorAction","createUpdateRequest","createUpdateSuccess","Update","createUpdateError","createUpdateErrorAction","getLatestUpdateRequest","getLatestUpdateSuccess","getLatestUpdateSuccessAction","getLatestUpdateError","getLatestUpdateErrorAction","useSelectProject","projectAction","push","useHistory","ProjectList","useEffect","a","async","codeSendService","useGetAllProject","data-testid","subTitle","to","active","gutter","map","item","span","onClick","Meta","name","createdAt","avatar","FileOutlined","TextField","label","useField","field","meta","Item","hasFeedback","validateStatus","help","htmlFor","id","FileField","helper","inputFileRef","useRef","isError","handleButtonClick","current","click","handleFileChange","event","selectedFile","target","files","setValue","ref","hidden","onChange","onBlur","style","marginRight","UploadOutlined","Text","renderMessage","Form","handleSubmit","useFormikContext","onSubmitCapture","layout","validationSchema","yup","shape","required","initialValues","ProjectForm","createProject","projectFormValues","useCreateProject","onSubmit","htmlType","Project","minHeight","Header","Content","padding","path","component","render","Dashboard","_id","useGetLatestUpdate","marginTop","version","NumberOutlined","note","InfoCircleOutlined","CalendarOutlined","UpdateLog","useGetAllUpdate","dataSource","date","columns","dataIndex","UpdateForm","createUpdate","rest","useCreateUpdate","navigationMenuItems","icon","DashboardOutlined","GiftOutlined","ProjectSelector","selectedKeys","React","useMemo","findIndex","toString","overlay","DownOutlined","Navigation","location","pathname","includes","height","Main","Sider","App","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.334ca1ae.chunk.js","sourcesContent":["Object.defineProperty(window, \"matchMedia\", {\n  writable: true,\n  value: jest.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: jest.fn(),\n    removeListener: jest.fn(),\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn(),\n    dispatchEvent: jest.fn()\n  }))\n});\n\nexport default window;\n","import { Project } from \"interfaces/Project\";\n\nexport interface ProjectState {\n  items: Project[];\n  selected?: Project;\n  loading: boolean;\n  error?: string;\n}\n\nexport enum ProjectActionTypes {\n  GetRequest = \"@Project/GetRequest\",\n  GetSuccess = \"@Project/GetSuccess\",\n  GetError = \"@Project/GetError\",\n  CreateRequest = \"@Project/CreateRequest\",\n  CreateSuccess = \"@Project/CreateSuccess\",\n  CreateError = \"@Project/CreateError\",\n  Select = \"@Project/Select\"\n}\n","import axios, { AxiosResponse } from \"axios\";\n\nexport default class Service {\n  baseURL: string;\n\n  constructor(baseURL: string) {\n    this.baseURL = baseURL;\n  }\n\n  private handleError(res: AxiosResponse) {\n    const { status, message } = res.data;\n    return status === \"error\" ? Promise.reject(message) : res;\n  }\n\n  public get<T>(endpoint: string) {\n    return axios\n      .get(this.baseURL + endpoint)\n      .then(this.handleError)\n      .then(res => res.data as T);\n  }\n\n  public post<T>(endpoint: string, data: any) {\n    return axios\n      .post(this.baseURL + endpoint, data)\n      .then(this.handleError)\n      .then(res => res.data as T);\n  }\n\n  public put<T>(endpoint: string, data: any) {\n    return axios\n      .put(this.baseURL + endpoint, data)\n      .then(this.handleError)\n      .then(res => res.data as T);\n  }\n\n  public delete<T>(endpoint: string) {\n    return axios\n      .delete(this.baseURL + endpoint)\n      .then(this.handleError)\n      .then(res => res.data as T);\n  }\n}\n","import { ProjectFormValues, Project } from \"interfaces/Project\";\nimport { UpdateFormValues, Update } from \"interfaces/Update\";\nimport Service from \"./service\";\n\nconst baseURL = process.env.REACT_APP_CODE_SEND_SERVICE_URL as string;\nconst service = new Service(baseURL);\n\nconst getallProjects = () => {\n  return service.get<Project[]>(\"/project\");\n};\n\nconst createProject = (project: ProjectFormValues) => {\n  return service.post<Project>(\"/project\", project);\n};\n\nconst getAllUpdates = (projectId: string) => {\n  return service.get<Update[]>(`/project/${projectId}/update`);\n};\n\nconst getLatestUpdate = (projectId: string) => {\n  return service.get<Update>(`/project/${projectId}/update/latest`);\n};\n\nconst createUpdate = (projectId: string, update: UpdateFormValues) => {\n  return service.post<Update>(`/project/${projectId}/update`, update);\n};\n\nconst uploadUpdate = (projectId: string, updateId: string, bundle: Blob) => {\n  const formData = new FormData();\n  formData.append(\"bundle\", bundle);\n  return service.put<Update>(\n    `/project/${projectId}/update/${updateId}/bundle`,\n    formData\n  );\n};\n\nexport default {\n  baseURL,\n  getallProjects,\n  createProject,\n  getAllUpdates,\n  getLatestUpdate,\n  createUpdate,\n  uploadUpdate\n};\n","import { useCallback } from \"react\";\nimport { notification } from \"antd\";\n\nexport const useNotification = () => {\n  const handleSuccess = useCallback((title: string, description: string) => {\n    notification.success({\n      message: title,\n      description\n    });\n  }, []);\n\n  const handleError = useCallback((title: string, description: string) => {\n    notification.error({\n      message: title,\n      description\n    });\n  }, []);\n\n  return {\n    handleSuccess,\n    handleError\n  };\n};\n","import { Reducer } from \"react\";\nimport { Action } from \"interfaces/Action\";\n\ntype Reducers<T extends object> = {\n  [key in keyof T]: [Reducer<T[key], Action>, T[key]];\n};\n\nexport const combineReducers = <T extends object>(\n  reducers: Reducers<T>\n): [Reducer<T, Action>, T] => {\n  type key = keyof T;\n\n  const reducerKeys = (Object.keys(reducers) as unknown) as [key];\n  const reducerValues = Object.values(reducers) as [\n    Reducer<T[key], Action>,\n    T[key]\n  ][];\n\n  const stateMap = new Map<keyof T, T[key]>();\n  const reducersMap = new Map<keyof T, Reducer<T[key], Action>>();\n\n  reducerKeys.forEach((key, index) => {\n    stateMap.set(key, reducerValues[index][1]);\n  });\n\n  reducerValues.forEach((value, index) => {\n    reducersMap.set(reducerKeys[index], value[0]);\n  });\n\n  return [\n    (state: T, action: Action) => {\n      let hasStateChanged = false;\n      const newState = new Map<keyof T, T[key]>();\n      let nextStateForCurrentKey: T[keyof T];\n\n      reducerKeys.forEach(reducerKey => {\n        const currentReducer = reducersMap.get(reducerKey)!;\n        const prevStateForCurrentKey = state[reducerKey];\n\n        nextStateForCurrentKey = currentReducer(prevStateForCurrentKey, action);\n        hasStateChanged =\n          hasStateChanged || nextStateForCurrentKey !== prevStateForCurrentKey;\n        newState.set(reducerKey, nextStateForCurrentKey);\n      });\n\n      return hasStateChanged ? (Object.fromEntries(newState) as T) : state;\n    },\n    Object.fromEntries(stateMap) as T\n  ];\n};\n","import { Reducer } from \"react\";\nimport { Action } from \"interfaces/Action\";\nimport { ProjectState, ProjectActionTypes } from \"./types\";\nimport { combineReducers } from \"utils/combineReducers\";\n\nexport const projectInitialState: ProjectState = {\n  items: [],\n  selected: undefined,\n  loading: false,\n  error: undefined\n};\n\nconst itemsReducer: Reducer<ProjectState[\"items\"], Action> = (\n  prevState,\n  { type, payload }\n) => {\n  switch (type) {\n    case ProjectActionTypes.GetSuccess:\n      return [...payload];\n    case ProjectActionTypes.CreateSuccess:\n      return [...prevState, payload];\n    default:\n      return prevState;\n  }\n};\n\nconst selectedReducer: Reducer<ProjectState[\"selected\"], Action> = (\n  prevState,\n  { type, payload }\n) => {\n  switch (type) {\n    case ProjectActionTypes.Select:\n      return payload;\n    default:\n      return prevState;\n  }\n};\n\nconst loadingReducer: Reducer<ProjectState[\"loading\"], Action> = (\n  prevState,\n  { type }\n) => {\n  switch (type) {\n    case ProjectActionTypes.GetRequest:\n    case ProjectActionTypes.CreateRequest:\n      return true;\n    case ProjectActionTypes.GetSuccess:\n    case ProjectActionTypes.GetError:\n    case ProjectActionTypes.CreateSuccess:\n    case ProjectActionTypes.CreateError:\n      return false;\n    default:\n      return prevState;\n  }\n};\n\nconst errorReducer: Reducer<ProjectState[\"error\"], Action> = (\n  prevState,\n  { type, payload }\n) => {\n  switch (type) {\n    case ProjectActionTypes.GetError:\n    case ProjectActionTypes.CreateError:\n      return payload;\n    case ProjectActionTypes.GetSuccess:\n    case ProjectActionTypes.CreateSuccess:\n      return undefined;\n    default:\n      return prevState;\n  }\n};\n\nexport default combineReducers<ProjectState>({\n  items: [itemsReducer, projectInitialState[\"items\"]],\n  selected: [selectedReducer, projectInitialState[\"selected\"]],\n  loading: [loadingReducer, projectInitialState[\"loading\"]],\n  error: [errorReducer, projectInitialState[\"error\"]]\n});\n","import { Update } from \"interfaces/Update\";\n\nexport interface UpdateState {\n  items: Update[];\n  latest?: Update;\n  loading: boolean;\n  error?: string;\n}\n\nexport enum UpdateActionTypes {\n  GetRequest = \"@Update/GetRequest\",\n  GetSuccess = \"@Update/GetSuccess\",\n  GetError = \"@Update/GetError\",\n  CreateRequest = \"@Update/CreateRequest\",\n  CreateSuccess = \"@Update/CreateSuccess\",\n  CreateError = \"@Update/CreateError\",\n  GetLatestRequest = \"@Update/GetLatestRequest\",\n  GetLatestSuccess = \"@Update/GetLatestSuccess\",\n  GetLatestError = \"@Update/GetLatestError\"\n}\n","import { Reducer } from \"react\";\nimport { Action } from \"interfaces/Action\";\nimport { UpdateState, UpdateActionTypes } from \"./types\";\nimport { combineReducers } from \"utils/combineReducers\";\n\nexport const updateInitialState: UpdateState = {\n  items: [],\n  latest: undefined,\n  loading: false,\n  error: undefined\n};\n\nconst itemsReducer: Reducer<UpdateState[\"items\"], Action> = (\n  prevState,\n  { type, payload }\n) => {\n  switch (type) {\n    case UpdateActionTypes.GetSuccess:\n      return [...payload];\n    case UpdateActionTypes.CreateSuccess:\n      return [...prevState, payload];\n    default:\n      return prevState;\n  }\n};\n\nconst latestReducer: Reducer<UpdateState[\"latest\"], Action> = (\n  prevState,\n  { type, payload }\n) => {\n  switch (type) {\n    case UpdateActionTypes.GetLatestSuccess:\n      return payload;\n    default:\n      return prevState;\n  }\n};\n\nconst loadingReducer: Reducer<UpdateState[\"loading\"], Action> = (\n  prevState,\n  { type }\n) => {\n  switch (type) {\n    case UpdateActionTypes.GetRequest:\n    case UpdateActionTypes.CreateRequest:\n    case UpdateActionTypes.GetLatestRequest:\n      return true;\n    case UpdateActionTypes.GetSuccess:\n    case UpdateActionTypes.GetError:\n    case UpdateActionTypes.CreateSuccess:\n    case UpdateActionTypes.CreateError:\n    case UpdateActionTypes.GetLatestSuccess:\n    case UpdateActionTypes.GetLatestError:\n      return false;\n    default:\n      return prevState;\n  }\n};\n\nconst errorReducer: Reducer<UpdateState[\"error\"], Action> = (\n  prevState,\n  { type, payload }\n) => {\n  switch (type) {\n    case UpdateActionTypes.GetError:\n    case UpdateActionTypes.CreateError:\n    case UpdateActionTypes.GetLatestError:\n      return payload;\n    case UpdateActionTypes.GetSuccess:\n    case UpdateActionTypes.CreateSuccess:\n    case UpdateActionTypes.GetLatestSuccess:\n      return undefined;\n    default:\n      return prevState;\n  }\n};\n\nexport default combineReducers<UpdateState>({\n  items: [itemsReducer, updateInitialState[\"items\"]],\n  latest: [latestReducer, updateInitialState[\"latest\"]],\n  loading: [loadingReducer, updateInitialState[\"loading\"]],\n  error: [errorReducer, updateInitialState[\"error\"]]\n});\n","import { combineReducers } from \"utils/combineReducers\";\nimport projectStateAndReducers from \"./project/reducers\";\nimport updateStateAndReducers from \"./update/reducers\";\nimport { RootState } from \"./types\";\n\nconst [projectReducers, projectState] = projectStateAndReducers;\nconst [updateReducers, updateState] = updateStateAndReducers;\nexport default combineReducers<RootState>({\n  project: [projectReducers, projectState],\n  update: [updateReducers, updateState]\n});\n","import React, {\n  useReducer,\n  createContext,\n  Dispatch,\n  FunctionComponent\n} from \"react\";\nimport rootStateAndReducers from \"./reducers\";\nimport { RootState } from \"./types\";\nimport { Action } from \"interfaces/Action\";\nimport { projectInitialState } from \"./project/reducers\";\nimport { updateInitialState } from \"./update/reducers\";\n\ninterface RootContextValue {\n  state: RootState;\n  dispatch: Dispatch<Action>;\n}\n\nexport const storeContext = createContext<RootContextValue>({\n  state: {\n    project: projectInitialState,\n    update: updateInitialState\n  },\n  dispatch: () => null\n});\n\nconst { Provider } = storeContext;\n\nexport const StoreProvider: FunctionComponent = ({ children }) => {\n  const [rootReducers, rootState] = rootStateAndReducers;\n  const [state, dispatch] = useReducer(rootReducers, rootState);\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\n};\n","import { useContext, useCallback } from \"react\";\nimport { storeContext } from \"stores\";\nimport {\n  getProjectRequestAction,\n  getProjectSuccessAction,\n  getProjectErrorAction,\n  createProjectRequestAction,\n  createProjectSuccessAction,\n  createProjectErrorAction,\n  selectProjectAction\n} from \"stores/project/actions\";\nimport { Project } from \"interfaces/Project\";\nimport {\n  getUpdateRequestAction,\n  getUpdateSuccessAction,\n  getUpdateErrorAction,\n  createUpdateRequestAction,\n  createUpdateSuccessAction,\n  createUpdateErrorAction,\n  getLatestUpdateRequestAction,\n  getLatestUpdateSuccessAction,\n  getLatestUpdateErrorAction\n} from \"stores/update/actions\";\nimport { Update } from \"interfaces/Update\";\n\nexport const useStore = () => {\n  const store = useContext(storeContext);\n  return store;\n};\n\nexport const useProjectState = () => {\n  const {\n    state: { project }\n  } = useStore();\n  return project;\n};\n\nexport const useProjectAction = () => {\n  const { dispatch } = useStore();\n\n  const getProjectRequest = useCallback(\n    () => dispatch(getProjectRequestAction()),\n    [dispatch]\n  );\n\n  const getProjectSuccess = useCallback(\n    (projects: Project[]) => dispatch(getProjectSuccessAction(projects)),\n    [dispatch]\n  );\n\n  const getProjectError = useCallback(\n    (error: string) => dispatch(getProjectErrorAction(error)),\n    [dispatch]\n  );\n\n  const createProjectRequest = useCallback(\n    () => dispatch(createProjectRequestAction()),\n    [dispatch]\n  );\n\n  const createProjectSuccess = useCallback(\n    (project: Project) => dispatch(createProjectSuccessAction(project)),\n    [dispatch]\n  );\n\n  const createProjectError = useCallback(\n    (error: string) => dispatch(createProjectErrorAction(error)),\n    [dispatch]\n  );\n\n  const selectProject = useCallback(\n    (project: Project) => dispatch(selectProjectAction(project)),\n    [dispatch]\n  );\n\n  return {\n    getProjectRequest,\n    getProjectSuccess,\n    getProjectError,\n    createProjectRequest,\n    createProjectSuccess,\n    createProjectError,\n    selectProject\n  };\n};\n\nexport const useUpdateState = () => {\n  const {\n    state: { update }\n  } = useStore();\n  return update;\n};\n\nexport const useUpdateAction = () => {\n  const { dispatch } = useStore();\n\n  const getUpdateRequest = useCallback(\n    () => dispatch(getUpdateRequestAction()),\n    [dispatch]\n  );\n\n  const getUpdateSuccess = useCallback(\n    (updates: Update[]) => dispatch(getUpdateSuccessAction(updates)),\n    [dispatch]\n  );\n\n  const getUpdateError = useCallback(\n    (error: string) => dispatch(getUpdateErrorAction(error)),\n    [dispatch]\n  );\n\n  const createUpdateRequest = useCallback(\n    () => dispatch(createUpdateRequestAction()),\n    [dispatch]\n  );\n\n  const createUpdateSuccess = useCallback(\n    (Update: Update) => dispatch(createUpdateSuccessAction(Update)),\n    [dispatch]\n  );\n\n  const createUpdateError = useCallback(\n    (error: string) => dispatch(createUpdateErrorAction(error)),\n    [dispatch]\n  );\n\n  const getLatestUpdateRequest = useCallback(\n    () => dispatch(getLatestUpdateRequestAction()),\n    [dispatch]\n  );\n\n  const getLatestUpdateSuccess = useCallback(\n    (update: Update) => dispatch(getLatestUpdateSuccessAction(update)),\n    [dispatch]\n  );\n\n  const getLatestUpdateError = useCallback(\n    (error: string) => dispatch(getLatestUpdateErrorAction(error)),\n    [dispatch]\n  );\n\n  return {\n    getUpdateRequest,\n    getUpdateSuccess,\n    getUpdateError,\n    createUpdateRequest,\n    createUpdateSuccess,\n    createUpdateError,\n    getLatestUpdateRequest,\n    getLatestUpdateSuccess,\n    getLatestUpdateError\n  };\n};\n","import { action } from \"typesafe-actions\";\nimport { ProjectActionTypes } from \"./types\";\nimport { Project } from \"interfaces/Project\";\n\nexport const getProjectRequestAction = () => {\n  return action(ProjectActionTypes.GetRequest);\n};\n\nexport const getProjectSuccessAction = (projects: Project[]) => {\n  return action(ProjectActionTypes.GetSuccess, projects);\n};\n\nexport const getProjectErrorAction = (error: string) => {\n  return action(ProjectActionTypes.GetError, error);\n};\n\nexport const createProjectRequestAction = () => {\n  return action(ProjectActionTypes.CreateRequest);\n};\n\nexport const createProjectSuccessAction = (project: Project) => {\n  return action(ProjectActionTypes.CreateSuccess, project);\n};\n\nexport const createProjectErrorAction = (error: string) => {\n  return action(ProjectActionTypes.CreateError, error);\n};\n\nexport const selectProjectAction = (project: Project) => {\n  return action(ProjectActionTypes.Select, project);\n};\n","import { action } from \"typesafe-actions\";\nimport { UpdateActionTypes } from \"./types\";\nimport { Update } from \"interfaces/Update\";\n\nexport const getUpdateRequestAction = () => {\n  return action(UpdateActionTypes.GetRequest);\n};\n\nexport const getUpdateSuccessAction = (updates: Update[]) => {\n  return action(UpdateActionTypes.GetSuccess, updates);\n};\n\nexport const getUpdateErrorAction = (error: string) => {\n  return action(UpdateActionTypes.GetError, error);\n};\n\nexport const createUpdateRequestAction = () => {\n  return action(UpdateActionTypes.CreateRequest);\n};\n\nexport const createUpdateSuccessAction = (update: Update) => {\n  return action(UpdateActionTypes.CreateSuccess, update);\n};\n\nexport const createUpdateErrorAction = (error: string) => {\n  return action(UpdateActionTypes.CreateError, error);\n};\n\nexport const getLatestUpdateRequestAction = () => {\n  return action(UpdateActionTypes.GetLatestRequest);\n};\n\nexport const getLatestUpdateSuccessAction = (update: Update) => {\n  return action(UpdateActionTypes.GetLatestSuccess, update);\n};\n\nexport const getLatestUpdateErrorAction = (error: string) => {\n  return action(UpdateActionTypes.GetLatestError, error);\n};\n","import { useEffect } from \"react\";\nimport { ProjectFormValues, Project } from \"interfaces/Project\";\nimport codeSendService from \"utils/api/codeSendService\";\nimport { useNotification } from \"hooks/useNotification\";\nimport { useProjectState, useProjectAction } from \"./useStore\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const useGetAllProject = () => {\n  const { items, loading, error } = useProjectState();\n  const {\n    getProjectRequest,\n    getProjectSuccess,\n    getProjectError\n  } = useProjectAction();\n  const { handleError } = useNotification();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        getProjectRequest();\n        const projects = await codeSendService.getallProjects();\n        getProjectSuccess(projects);\n      } catch (error) {\n        getProjectError(error.message);\n        handleError(\"Failed\", error.message);\n      }\n    })();\n  }, [getProjectRequest, getProjectSuccess, getProjectError, handleError]);\n\n  return { items, loading, error };\n};\n\nexport const useCreateProject = () => {\n  const { loading, error } = useProjectState();\n  const {\n    createProjectRequest,\n    createProjectSuccess,\n    createProjectError\n  } = useProjectAction();\n  const { handleSuccess, handleError } = useNotification();\n  const { push } = useHistory();\n\n  const createProject = async (projectFormValues: ProjectFormValues) => {\n    try {\n      createProjectRequest();\n      const project = await codeSendService.createProject(projectFormValues);\n      createProjectSuccess(project);\n      handleSuccess(\"Success\", \"Your project is successfully created\");\n      push(\"/project\");\n    } catch (error) {\n      createProjectError(error.message);\n      handleError(\"Failed\", error.message);\n    }\n  };\n\n  return {\n    createProject,\n    loading,\n    error\n  };\n};\n\nexport const useSelectProject = () => {\n  const projectAction = useProjectAction();\n  const { push } = useHistory();\n\n  const selectProject = (project: Project) => {\n    projectAction.selectProject(project);\n    push(\"/dashboard\");\n  };\n\n  return { selectProject };\n};\n","import React from \"react\";\nimport \"matchMedia.mock\";\nimport { Button, Skeleton, PageHeader, Card, Row, Col } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport { useGetAllProject, useSelectProject } from \"hooks/useProject\";\nimport { FileOutlined } from \"@ant-design/icons\";\n\nconst ProjectList: React.FC = () => {\n  const { items, loading } = useGetAllProject();\n  const { selectProject } = useSelectProject();\n\n  return (\n    <div data-testid=\"page-project-list\">\n      <PageHeader title=\"Projects\" subTitle=\"Show your project list\" />\n\n      <Link to=\"/project/create\">\n        <Button type=\"primary\">Create New Project</Button>\n      </Link>\n\n      <Skeleton loading={loading} active>\n        <Row gutter={[15, 15]}>\n          {items.map((item, index) => (\n            <Col span={6} key={index}>\n              <Card onClick={() => selectProject(item)}>\n                <Card.Meta\n                  title={item.name}\n                  description={item.createdAt}\n                  avatar={<FileOutlined />}\n                />\n              </Card>\n            </Col>\n          ))}\n        </Row>\n      </Skeleton>\n    </div>\n  );\n};\n\nexport default ProjectList;\n","import React from \"react\";\nimport { Input, Form } from \"antd\";\nimport { useField } from \"formik\";\n\ninterface TextFieldProps {\n  label: string;\n  name: string;\n}\n\nexport const TextField: React.FC<TextFieldProps> = ({ name, label }) => {\n  const [field, meta] = useField({ name });\n  return (\n    <Form.Item\n      label={label}\n      hasFeedback\n      validateStatus={meta.error && \"error\"}\n      help={meta.error}\n      htmlFor={name}\n    >\n      <Input {...field} id={name} />\n    </Form.Item>\n  );\n};\n","import React, { useRef } from \"react\";\nimport { Form, Button, Typography } from \"antd\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport { useField } from \"formik\";\n\ninterface FileFieldProps {\n  label: string;\n  name: string;\n}\n\nexport const FileField: React.FC<FileFieldProps> = ({ label, name }) => {\n  const [field, meta, helper] = useField<File>({ name });\n  const inputFileRef = useRef<HTMLInputElement>(null);\n\n  const isError = () => {\n    return meta.error !== undefined;\n  };\n\n  const handleButtonClick = () => {\n    inputFileRef.current?.click();\n  };\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = event.target.files && event.target.files[0];\n    helper.setValue(selectedFile!);\n  };\n\n  const renderInput = () => {\n    return (\n      <input\n        id={name}\n        type=\"file\"\n        ref={inputFileRef}\n        hidden\n        onChange={handleFileChange}\n        onBlur={field.onBlur}\n      />\n    );\n  };\n\n  const renderButton = () => {\n    return (\n      <Button onClick={handleButtonClick} style={{ marginRight: 15 }}>\n        <UploadOutlined /> Choose File\n      </Button>\n    );\n  };\n\n  const renderMessage = () => {\n    const message = isError()\n      ? meta.error\n      : field.value\n      ? field.value.name\n      : \"\";\n\n    return (\n      <Typography.Text type={isError() ? \"danger\" : \"secondary\"}>\n        {message}\n      </Typography.Text>\n    );\n  };\n\n  return (\n    <Form.Item label={label} htmlFor={name}>\n      {renderInput()}\n      {renderButton()}\n      {renderMessage()}\n    </Form.Item>\n  );\n};\n","import React from \"react\";\nimport { Form as AntdForm } from \"antd\";\nimport { useFormikContext } from \"formik\";\n\nexport const Form: React.FC = ({ children }) => {\n  const { handleSubmit } = useFormikContext();\n  return (\n    <AntdForm onSubmitCapture={handleSubmit} layout=\"vertical\">\n      {children}\n    </AntdForm>\n  );\n};\n","import React from \"react\";\nimport { TextField, Form } from \"components/formikWrapper\";\nimport { ProjectFormValues } from \"interfaces/Project\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport { Button, PageHeader } from \"antd\";\nimport { useCreateProject } from \"hooks/useProject\";\n\nconst validationSchema = yup.object().shape({\n  name: yup.string().required()\n});\n\nconst initialValues: ProjectFormValues = {\n  name: \"\"\n};\n\nconst ProjectForm: React.FC = () => {\n  const { createProject, loading } = useCreateProject();\n\n  return (\n    <div data-testid=\"page-project-form\">\n      <PageHeader title=\"Create Project\" subTitle=\"Create your new project\" />\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={createProject}\n      >\n        <Form>\n          <TextField name=\"name\" label=\"Name\" />\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n            Submit\n          </Button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n\nexport default ProjectForm;\n","import Project from \"./page\";\nexport default Project;\n","import React from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport ProjectList from \"./projectList\";\nimport ProjectForm from \"./projectForm\";\nimport { Layout } from \"antd\";\n\nconst Page: React.FC = () => {\n  return (\n    <div data-testid=\"page-project\">\n      <Layout style={{ minHeight: \"100vh\" }}>\n        <Layout.Header>Code Send</Layout.Header>\n        <Layout>\n          <Layout.Content style={{ padding: \"30px\" }}>\n            <Switch>\n              <Route path=\"/project/list\" component={ProjectList} />\n              <Route path=\"/project/create\" component={ProjectForm} />\n              <Route render={() => <Redirect to=\"/project/list\" />} />\n            </Switch>\n          </Layout.Content>\n        </Layout>\n      </Layout>\n    </div>\n  );\n};\n\nexport default Page;\n","import Dashboard from \"./page\";\nexport default Dashboard;\n","import React from \"react\";\nimport { Card, Row, Col, PageHeader, Skeleton } from \"antd\";\nimport {\n  NumberOutlined,\n  InfoCircleOutlined,\n  CalendarOutlined\n} from \"@ant-design/icons\";\nimport { useGetLatestUpdate } from \"hooks/useUpdate\";\n\nconst Page: React.FC = () => {\n  const { latest, loading } = useGetLatestUpdate();\n\n  return (\n    <div data-testid=\"page-dashboard\">\n      <PageHeader\n        title=\"Latest Update\"\n        subTitle=\"Show your latest update information\"\n      />\n\n      <Row style={{ marginTop: 15 }} gutter={16}>\n        <Col span=\"8\">\n          <Card>\n            <Skeleton avatar loading={loading} active>\n              <Card.Meta\n                title=\"Version\"\n                description={latest?.version}\n                avatar={<NumberOutlined />}\n              />\n            </Skeleton>\n          </Card>\n        </Col>\n\n        <Col span=\"8\">\n          <Card>\n            <Skeleton avatar loading={loading} active>\n              <Card.Meta\n                title=\"Note\"\n                description={latest?.note}\n                avatar={<InfoCircleOutlined />}\n              />\n            </Skeleton>\n          </Card>\n        </Col>\n\n        <Col span=\"8\">\n          <Card>\n            <Skeleton avatar loading={loading} active>\n              <Card.Meta\n                title=\"Release Date\"\n                description={latest?.createdAt}\n                avatar={<CalendarOutlined />}\n              />\n            </Skeleton>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default Page;\n","import { useEffect } from \"react\";\nimport { UpdateFormValues } from \"interfaces/Update\";\nimport codeSendService from \"utils/api/codeSendService\";\nimport { useNotification } from \"./useNotification\";\nimport { useUpdateState, useProjectState, useUpdateAction } from \"./useStore\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const useGetAllUpdate = () => {\n  const { items, loading, error } = useUpdateState();\n  const project = useProjectState();\n  const {\n    getUpdateRequest,\n    getUpdateSuccess,\n    getUpdateError\n  } = useUpdateAction();\n  const { handleError } = useNotification();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        getUpdateRequest();\n        const updates = await codeSendService.getAllUpdates(\n          project.selected?._id || \"\"\n        );\n        getUpdateSuccess(updates);\n      } catch (error) {\n        getUpdateError(error.message);\n        handleError(\"Failed\", error.message);\n      }\n    })();\n  }, [\n    getUpdateRequest,\n    getUpdateSuccess,\n    getUpdateError,\n    handleError,\n    project.selected\n  ]);\n\n  return { items, loading, error };\n};\n\nexport const useGetLatestUpdate = () => {\n  const { latest, loading, error } = useUpdateState();\n  const project = useProjectState();\n  const {\n    getLatestUpdateRequest,\n    getLatestUpdateSuccess,\n    getLatestUpdateError\n  } = useUpdateAction();\n  const { handleError } = useNotification();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        getLatestUpdateRequest();\n        const update = await codeSendService.getLatestUpdate(\n          project.selected?._id || \"\"\n        );\n        getLatestUpdateSuccess(update);\n      } catch (error) {\n        getLatestUpdateError(error.message);\n        handleError(\"Failed\", error.message);\n      }\n    })();\n  }, [\n    getLatestUpdateRequest,\n    getLatestUpdateSuccess,\n    getLatestUpdateError,\n    handleError,\n    project.selected\n  ]);\n\n  return { latest, loading, error };\n};\n\nexport const useCreateUpdate = () => {\n  const { loading, error } = useUpdateState();\n  const project = useProjectState();\n  const {\n    createUpdateRequest,\n    createUpdateSuccess,\n    createUpdateError\n  } = useUpdateAction();\n  const { handleError, handleSuccess } = useNotification();\n  const { push } = useHistory();\n\n  const createUpdate = async ({ bundle, ...rest }: UpdateFormValues) => {\n    try {\n      createUpdateRequest();\n      let update = await codeSendService.createUpdate(\n        project.selected?._id || \"\",\n        rest\n      );\n      update = await codeSendService.uploadUpdate(\n        project.selected?._id || \"\",\n        update._id,\n        bundle!\n      );\n      createUpdateSuccess(update);\n      handleSuccess(\"Success\", \"Your update is successfully created\");\n      push(\"/update\");\n    } catch (error) {\n      createUpdateError(error.message);\n      handleError(\"Failed\", error.message);\n    }\n  };\n\n  return {\n    createUpdate,\n    loading,\n    error\n  };\n};\n","import React from \"react\";\nimport { Button, Skeleton, Table, PageHeader } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport { useGetAllUpdate } from \"hooks/useUpdate\";\n\nconst UpdateLog: React.FC = () => {\n  const { items, loading } = useGetAllUpdate();\n\n  const getDataSource = () => {\n    return items.map(item => ({\n      key: item._id,\n      date: item.createdAt,\n      version: item.version,\n      note: item.note\n    }));\n  };\n\n  const getColumns = () => {\n    return [\n      {\n        title: \"Relase Date\",\n        dataIndex: \"date\",\n        key: \"date\"\n      },\n      {\n        title: \"Version\",\n        dataIndex: \"version\",\n        key: \"version\"\n      },\n      {\n        title: \"Note\",\n        dataIndex: \"note\",\n        key: \"note\"\n      }\n    ];\n  };\n\n  return (\n    <div data-testid=\"page-update-log\">\n      <PageHeader title=\"Update Logs\" subTitle=\"Show your update logs\" />\n\n      <Link to=\"/update/create\">\n        <Button type=\"primary\">Create New Update</Button>\n      </Link>\n\n      <Skeleton loading={loading} active>\n        <Table\n          dataSource={getDataSource()}\n          columns={getColumns()}\n          style={{ marginTop: 15 }}\n          data-testid=\"table-update-log\"\n        />\n      </Skeleton>\n    </div>\n  );\n};\n\nexport default UpdateLog;\n","import React from \"react\";\nimport { TextField, Form, FileField } from \"components/formikWrapper\";\nimport { UpdateFormValues } from \"interfaces/Update\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport { Button, PageHeader } from \"antd\";\nimport { useCreateUpdate } from \"hooks/useUpdate\";\n\nconst validationSchema = yup.object().shape({\n  version: yup.string().required(),\n  note: yup.string().required(),\n  bundle: yup.mixed().required()\n});\n\nconst initialValues: UpdateFormValues = {\n  version: \"\",\n  note: \"\"\n};\n\nconst UpdateForm: React.FC = () => {\n  const { createUpdate, loading } = useCreateUpdate();\n\n  return (\n    <div data-testid=\"page-update-form\">\n      <PageHeader\n        title=\"Create Update\"\n        subTitle=\"Create and realease your new update\"\n      />\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={createUpdate}\n      >\n        <Form>\n          <TextField name=\"version\" label=\"Version\" />\n          <TextField name=\"note\" label=\"Note\" />\n          <FileField name=\"bundle\" label=\"Bundle\" />\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n            Submit\n          </Button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n\nexport default UpdateForm;\n","import Update from \"./page\";\nexport default Update;\n","import React from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport UpdateLog from \"./updateLog\";\nimport UpdateForm from \"./updateForm\";\n\nconst Page: React.FC = () => {\n  return (\n    <div data-testid=\"page-update\">\n      <Switch>\n        <Route path=\"/update/log\" component={UpdateLog} />\n        <Route path=\"/update/create\" component={UpdateForm} />\n        <Route render={() => <Redirect to=\"/update/log\" />} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default Page;\n","import React from \"react\";\nimport { Menu, Layout, Dropdown, Button } from \"antd\";\nimport {\n  DashboardOutlined,\n  GiftOutlined,\n  DownOutlined\n} from \"@ant-design/icons\";\nimport { Route, Redirect, Link, Switch, useHistory } from \"react-router-dom\";\nimport Dashboard from \"modules/dashboard\";\nimport Update from \"modules/update\";\nimport { NavigationMenuItem } from \"interfaces/Navigation\";\nimport { useProjectState } from \"hooks/useStore\";\nimport { useSelectProject } from \"hooks/useProject\";\n\nconst navigationMenuItems: NavigationMenuItem[] = [\n  {\n    path: \"/dashboard\",\n    component: Dashboard,\n    title: \"Dashboard\",\n    icon: <DashboardOutlined />\n  },\n  {\n    path: \"/update\",\n    component: Update,\n    title: \"Update\",\n    icon: <GiftOutlined />\n  }\n];\n\nconst ProjectSelector = () => {\n  const { items, selected } = useProjectState();\n  const { selectProject } = useSelectProject();\n\n  const selectedKeys = React.useMemo(() => {\n    return items.findIndex(item => item.name === selected?.name).toString();\n  }, [items, selected]);\n\n  const renderMenu = () => {\n    return (\n      <Menu selectedKeys={[selectedKeys]} data-testid=\"project-selector-button\">\n        {items.map((item, index) => (\n          <Menu.Item\n            key={index}\n            onClick={() => selectProject(item)}\n            data-testid=\"project-selector-item\"\n          >\n            {item.name}\n          </Menu.Item>\n        ))}\n      </Menu>\n    );\n  };\n\n  return (\n    <Dropdown overlay={renderMenu()}>\n      <Button>\n        {selected?.name} <DownOutlined />\n      </Button>\n    </Dropdown>\n  );\n};\n\nconst Navigation = () => {\n  const { location } = useHistory();\n\n  const selectedKeys = React.useMemo(() => {\n    const key = navigationMenuItems\n      .findIndex(({ path }) => location.pathname.includes(path))\n      .toString();\n    return [key];\n  }, [location.pathname]);\n\n  return (\n    <Menu style={{ height: \"100%\" }} selectedKeys={selectedKeys}>\n      {navigationMenuItems.map(({ path, title, icon }, index) => (\n        <Menu.Item key={index}>\n          <Link to={path}>\n            {icon}\n            {title}\n          </Link>\n        </Menu.Item>\n      ))}\n    </Menu>\n  );\n};\n\nconst Content = () => {\n  return (\n    <Switch>\n      {navigationMenuItems.map(({ path, component }, index) => (\n        <Route key={index} path={path} component={component} />\n      ))}\n      <Redirect to={navigationMenuItems[0].path} />\n    </Switch>\n  );\n};\n\nconst Page: React.FC = () => {\n  return (\n    <Layout style={{ minHeight: \"100vh\" }}>\n      <Layout.Header>\n        <ProjectSelector />\n      </Layout.Header>\n      <Layout>\n        <Layout.Sider>\n          <Navigation />\n        </Layout.Sider>\n        <Layout.Content style={{ padding: \"30px\" }}>\n          <Content />\n        </Layout.Content>\n      </Layout>\n    </Layout>\n  );\n};\n\nexport default Page;\n","import Main from \"./page\";\nexport default Main;\n","import React from \"react\";\nimport Project from \"modules/project\";\nimport Main from \"modules/main\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { StoreProvider } from \"stores\";\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <StoreProvider>\n        <Switch>\n          <Route path=\"/project\" component={Project} />\n          <Route path=\"/\" component={Main} />\n        </Switch>\n      </StoreProvider>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"antd/dist/antd.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}