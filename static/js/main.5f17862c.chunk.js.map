{"version":3,"sources":["utils/api/service.ts","utils/api/codeSendService.ts","hooks/useUpdate.tsx","modules/dashboard/index.tsx","modules/dashboard/page.tsx","modules/update/updateLog.tsx","components/formikWrapper/textField.tsx","components/formikWrapper/fileField.tsx","components/formikWrapper/form.tsx","modules/update/updateForm.tsx","modules/update/index.tsx","modules/update/page.tsx","modules/main/index.tsx","modules/main/page.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Service","baseURL","this","res","data","status","message","Promise","reject","endpoint","axios","get","then","handleError","post","put","delete","process","REACT_APP_CODE_SEND_SERVICE_URL","service","update","id","bundle","formData","FormData","append","useUpdate","useState","updates","setUpdates","latestUpdate","setLatestUpdate","loading","setLoading","error","setError","success","setSuccess","handleSuccessIndicator","useCallback","title","description","notification","handleErrorIndicator","Dashboard","useEffect","a","codeSendService","useGetLatestUpdate","data-testid","subTitle","style","marginTop","gutter","span","avatar","active","Meta","version","NumberOutlined","note","InfoCircleOutlined","createdAt","CalendarOutlined","UpdateLog","useGetAllUpdate","to","type","dataSource","map","key","_id","date","columns","dataIndex","TextField","name","label","useField","field","meta","Item","hasFeedback","validateStatus","help","htmlFor","FileField","helper","inputFileRef","useRef","isError","undefined","handleButtonClick","current","click","handleFileChange","event","selectedFile","target","files","setValue","ref","hidden","onChange","onBlur","onClick","marginRight","UploadOutlined","value","Text","renderMessage","Form","children","handleSubmit","useFormikContext","onSubmitCapture","layout","validationSchema","yup","shape","required","initialValues","UpdateForm","history","useHistory","createUpdate","rest","useCreateUpdate","push","onSubmit","htmlType","Update","path","component","render","Main","minHeight","Header","Sider","height","DashboardOutlined","GiftOutlined","Content","padding","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5f17862c.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\n\nexport default class Service {\n  baseURL: string;\n\n  constructor(baseURL: string) {\n    this.baseURL = baseURL;\n  }\n\n  private handleError(res: AxiosResponse) {\n    const { status, message } = res.data;\n    return status === \"error\" ? Promise.reject(message) : res;\n  }\n\n  public get(endpoint: string) {\n    return axios\n      .get(this.baseURL + endpoint)\n      .then(this.handleError)\n      .then(res => res.data);\n  }\n\n  public post(endpoint: string, data: any) {\n    return axios\n      .post(this.baseURL + endpoint, data)\n      .then(this.handleError)\n      .then(res => res.data);\n  }\n\n  public put(endpoint: string, data: any) {\n    return axios\n      .put(this.baseURL + endpoint, data)\n      .then(this.handleError)\n      .then(res => res.data);\n  }\n\n  public delete(endpoint: string) {\n    return axios\n      .delete(this.baseURL + endpoint)\n      .then(this.handleError)\n      .then(res => res.data);\n  }\n}\n","import { UpdateFormValues } from \"interfaces/Update\";\nimport Service from \"./service\";\n\nconst baseURL = process.env.REACT_APP_CODE_SEND_SERVICE_URL as string;\nconst service = new Service(baseURL);\n\nconst getAllUpdates = () => {\n  return service.get(\"/update\");\n};\n\nconst getLatestUpdate = () => {\n  return service.get(\"/update/latest\");\n};\n\nconst createUpdate = (update: UpdateFormValues) => {\n  return service.post(\"/update\", update);\n};\n\nconst uploadUpdate = (id: string, bundle: Blob) => {\n  const formData = new FormData();\n  formData.append(\"bundle\", bundle);\n  return service.put(`/update/${id}/bundle`, formData);\n};\n\nexport default {\n  baseURL,\n  getAllUpdates,\n  getLatestUpdate,\n  createUpdate,\n  uploadUpdate\n};\n","import { useState, useEffect, useCallback } from \"react\";\nimport { Update, UpdateFormValues } from \"interfaces/Update\";\nimport codeSendService from \"utils/api/codeSendService\";\nimport { notification } from \"antd\";\n\nconst useUpdate = () => {\n  const [updates, setUpdates] = useState<Update[]>([]);\n  const [latestUpdate, setLatestUpdate] = useState<Update>();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string>();\n  const [success, setSuccess] = useState<boolean>(false);\n\n  const handleSuccessIndicator = useCallback(\n    (title: string, description: string) => {\n      notification.success({\n        message: title,\n        description\n      });\n    },\n    []\n  );\n\n  const handleErrorIndicator = useCallback(\n    (title: string, description: string) => {\n      notification.error({\n        message: title,\n        description\n      });\n    },\n    []\n  );\n\n  return {\n    updates,\n    setUpdates,\n    latestUpdate,\n    setLatestUpdate,\n    loading,\n    setLoading,\n    error,\n    setError,\n    success,\n    setSuccess,\n    handleSuccessIndicator,\n    handleErrorIndicator\n  };\n};\n\nexport const useGetAllUpdate = () => {\n  const {\n    setUpdates,\n    setLoading,\n    setError,\n    setSuccess,\n    updates,\n    loading,\n    error,\n    success,\n    handleErrorIndicator\n  } = useUpdate();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setLoading(true);\n        const updates = await codeSendService.getAllUpdates();\n        setUpdates(updates);\n        setSuccess(true);\n      } catch (error) {\n        setError(error.message);\n        handleErrorIndicator(\"Failed\", error.message);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [setUpdates, setLoading, setError, setSuccess, handleErrorIndicator]);\n\n  return { updates, loading, error, success };\n};\n\nexport const useGetLatestUpdate = () => {\n  const {\n    setLatestUpdate,\n    setLoading,\n    setError,\n    setSuccess,\n    latestUpdate,\n    loading,\n    error,\n    success,\n    handleErrorIndicator\n  } = useUpdate();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setLoading(true);\n        const update = await codeSendService.getLatestUpdate();\n        setLatestUpdate(update);\n        setSuccess(true);\n      } catch (error) {\n        setError(error.message);\n        handleErrorIndicator(\"Failed\", error.message);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [setLoading, setLatestUpdate, setSuccess, setError, handleErrorIndicator]);\n\n  return { latestUpdate, loading, error, success };\n};\n\nexport const useCreateUpdate = () => {\n  const {\n    setLoading,\n    setError,\n    setSuccess,\n    loading,\n    error,\n    success,\n    handleSuccessIndicator,\n    handleErrorIndicator\n  } = useUpdate();\n\n  const createUpdate = async ({ bundle, ...rest }: UpdateFormValues) => {\n    try {\n      setLoading(true);\n      const { _id } = await codeSendService.createUpdate(rest);\n      await codeSendService.uploadUpdate(_id, bundle!);\n      setSuccess(true);\n      handleSuccessIndicator(\"Success\", \"Your update is successfully created\");\n    } catch (error) {\n      setError(error.message);\n      handleErrorIndicator(\"Failed\", error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    createUpdate,\n    loading,\n    error,\n    success\n  };\n};\n","import Dashboard from \"./page\";\nexport default Dashboard;\n","import React from \"react\";\nimport { Card, Row, Col, PageHeader, Skeleton } from \"antd\";\nimport {\n  NumberOutlined,\n  InfoCircleOutlined,\n  CalendarOutlined\n} from \"@ant-design/icons\";\nimport { useGetLatestUpdate } from \"hooks/useUpdate\";\n\nconst Page: React.FC = () => {\n  const { latestUpdate, loading } = useGetLatestUpdate();\n\n  return (\n    <div data-testid=\"page-dashboard\">\n      <PageHeader\n        title=\"Latest Update\"\n        subTitle=\"Show your latest update information\"\n      />\n\n      <Row style={{ marginTop: 15 }} gutter={16}>\n        <Col span=\"8\">\n          <Card>\n            <Skeleton avatar loading={loading} active>\n              <Card.Meta\n                title=\"Version\"\n                description={latestUpdate?.version}\n                avatar={<NumberOutlined />}\n              />\n            </Skeleton>\n          </Card>\n        </Col>\n\n        <Col span=\"8\">\n          <Card>\n            <Skeleton avatar loading={loading} active>\n              <Card.Meta\n                title=\"Note\"\n                description={latestUpdate?.note}\n                avatar={<InfoCircleOutlined />}\n              />\n            </Skeleton>\n          </Card>\n        </Col>\n\n        <Col span=\"8\">\n          <Card>\n            <Skeleton avatar loading={loading} active>\n              <Card.Meta\n                title=\"Release Date\"\n                description={latestUpdate?.createdAt}\n                avatar={<CalendarOutlined />}\n              />\n            </Skeleton>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default Page;\n","import React from \"react\";\nimport { Button, Skeleton, Table, PageHeader } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport { useGetAllUpdate } from \"hooks/useUpdate\";\n\nconst UpdateLog: React.FC = () => {\n  const { updates, loading } = useGetAllUpdate();\n\n  const getDataSource = () => {\n    return updates.map(update => ({\n      key: update._id,\n      date: update.createdAt,\n      version: update.version,\n      note: update.note\n    }));\n  };\n\n  const getColumns = () => {\n    return [\n      {\n        title: \"Relase Date\",\n        dataIndex: \"date\",\n        key: \"date\"\n      },\n      {\n        title: \"Version\",\n        dataIndex: \"version\",\n        key: \"version\"\n      },\n      {\n        title: \"Note\",\n        dataIndex: \"note\",\n        key: \"note\"\n      }\n    ];\n  };\n\n  return (\n    <div data-testid=\"page-update-log\">\n      <PageHeader title=\"Update Logs\" subTitle=\"Show your update logs\" />\n\n      <Link to=\"/update/create\">\n        <Button type=\"primary\">Create New Update</Button>\n      </Link>\n\n      <Skeleton loading={loading} active>\n        <Table\n          dataSource={getDataSource()}\n          columns={getColumns()}\n          style={{ marginTop: 15 }}\n          data-testid=\"table-update-log\"\n        />\n      </Skeleton>\n    </div>\n  );\n};\n\nexport default UpdateLog;\n","import React from \"react\";\nimport { Input, Form } from \"antd\";\nimport { useField } from \"formik\";\n\ninterface TextFieldProps {\n  label: string;\n  name: string;\n}\n\nexport const TextField: React.FC<TextFieldProps> = ({ name, label }) => {\n  const [field, meta] = useField({ name });\n  return (\n    <Form.Item\n      label={label}\n      hasFeedback\n      validateStatus={meta.error && \"error\"}\n      help={meta.error}\n      htmlFor={name}\n    >\n      <Input {...field} id={name} />\n    </Form.Item>\n  );\n};\n","import React, { useRef } from \"react\";\nimport { Form, Button, Typography } from \"antd\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport { useField } from \"formik\";\n\ninterface FileFieldProps {\n  label: string;\n  name: string;\n}\n\nexport const FileField: React.FC<FileFieldProps> = ({ label, name }) => {\n  const [field, meta, helper] = useField<File>({ name });\n  const inputFileRef = useRef<HTMLInputElement>(null);\n\n  const isError = () => {\n    return meta.error !== undefined;\n  };\n\n  const handleButtonClick = () => {\n    inputFileRef.current?.click();\n  };\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = event.target.files && event.target.files[0];\n    helper.setValue(selectedFile!);\n  };\n\n  const renderInput = () => {\n    return (\n      <input\n        id={name}\n        type=\"file\"\n        ref={inputFileRef}\n        hidden\n        onChange={handleFileChange}\n        onBlur={field.onBlur}\n      />\n    );\n  };\n\n  const renderButton = () => {\n    return (\n      <Button onClick={handleButtonClick} style={{ marginRight: 15 }}>\n        <UploadOutlined /> Choose File\n      </Button>\n    );\n  };\n\n  const renderMessage = () => {\n    const message = isError()\n      ? meta.error\n      : field.value\n      ? field.value.name\n      : \"\";\n\n    return (\n      <Typography.Text type={isError() ? \"danger\" : \"secondary\"}>\n        {message}\n      </Typography.Text>\n    );\n  };\n\n  return (\n    <Form.Item label={label} htmlFor={name}>\n      {renderInput()}\n      {renderButton()}\n      {renderMessage()}\n    </Form.Item>\n  );\n};\n","import React from \"react\";\nimport { Form as AntdForm } from \"antd\";\nimport { useFormikContext } from \"formik\";\n\nexport const Form: React.FC = ({ children }) => {\n  const { handleSubmit } = useFormikContext();\n  return (\n    <AntdForm onSubmitCapture={handleSubmit} layout=\"vertical\">\n      {children}\n    </AntdForm>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { TextField, Form, FileField } from \"components/formikWrapper\";\nimport { UpdateFormValues } from \"interfaces/Update\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport { Button, PageHeader } from \"antd\";\nimport { useHistory } from \"react-router\";\nimport { useCreateUpdate } from \"hooks/useUpdate\";\n\nconst validationSchema = yup.object().shape({\n  version: yup.string().required(),\n  note: yup.string().required(),\n  bundle: yup.mixed().required()\n});\n\nconst initialValues: UpdateFormValues = {\n  version: \"\",\n  note: \"\"\n};\n\nconst UpdateForm: React.FC = () => {\n  const history = useHistory();\n  const { createUpdate, loading, success } = useCreateUpdate();\n\n  useEffect(() => {\n    if (success) {\n      history.push(\"/update\");\n    }\n  }, [success, history]);\n\n  return (\n    <div data-testid=\"page-update-form\">\n      <PageHeader\n        title=\"Create Update\"\n        subTitle=\"Create and realease your new update\"\n      />\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={createUpdate}\n      >\n        <Form>\n          <TextField name=\"version\" label=\"Version\" />\n          <TextField name=\"note\" label=\"Note\" />\n          <FileField name=\"bundle\" label=\"Bundle\" />\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n            Submit\n          </Button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n\nexport default UpdateForm;\n","import Update from \"./page\";\nexport default Update;\n","import React from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport UpdateLog from \"./updateLog\";\nimport UpdateForm from \"./updateForm\";\n\nconst Page: React.FC = () => {\n  return (\n    <div data-testid=\"page-update\">\n      <Switch>\n        <Route path=\"/update/log\" component={UpdateLog} />\n        <Route path=\"/update/create\" component={UpdateForm} />\n        <Route render={() => <Redirect to=\"/update/log\" />} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default Page;\n","import Main from \"./page\";\nexport default Main;\n","import React from \"react\";\nimport { Menu, Layout } from \"antd\";\nimport { DashboardOutlined, GiftOutlined } from \"@ant-design/icons\";\nimport { Route, Redirect, Link, Switch } from \"react-router-dom\";\nimport Dashboard from \"modules/dashboard\";\nimport Update from \"modules/update\";\n\nconst Page: React.FC = () => {\n  return (\n    <Layout style={{ minHeight: \"100vh\" }}>\n      <Layout.Header>Code Send</Layout.Header>\n      <Layout>\n        <Layout.Sider>\n          <Menu style={{ height: \"100%\" }}>\n            <Menu.Item>\n              <Link to=\"/dashboard\">\n                <DashboardOutlined />\n                Dashboard\n              </Link>\n            </Menu.Item>\n\n            <Menu.Item>\n              <Link to=\"/update\">\n                <GiftOutlined />\n                Update\n              </Link>\n            </Menu.Item>\n          </Menu>\n        </Layout.Sider>\n        <Layout.Content style={{ padding: \"30px\" }}>\n          <Switch>\n            <Route path=\"/dashboard\" component={Dashboard} />\n            <Route path=\"/update\" component={Update} />\n            <Redirect to=\"/dashboard\" />\n          </Switch>\n        </Layout.Content>\n      </Layout>\n    </Layout>\n  );\n};\n\nexport default Page;\n","import React from \"react\";\nimport Main from \"modules/main\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Main />\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"antd/dist/antd.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}