{"version":3,"sources":["modules/dashboard/index.tsx","modules/dashboard/page.tsx","modules/update/updateLog.tsx","components/formikWrapper/textField.tsx","components/formikWrapper/fileField.tsx","components/formikWrapper/form.tsx","modules/update/updateForm.tsx","utils/api/callApi.ts","modules/update/index.tsx","modules/update/page.tsx","modules/main/index.tsx","modules/main/page.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Dashboard","data-testid","UpdateLog","Button","as","Link","to","Table","Header","Row","HeaderCell","Body","Cell","TextField","name","label","useField","field","meta","Field","id","control","Input","error","FileField","helper","inputFile","isError","undefined","handleButtonClick","click","handleFileChange","event","selectedFile","target","files","setValue","htmlFor","type","ref","hidden","onChange","onBlur","icon","content","negative","basic","onClick","style","marginRight","message","value","Message","compact","size","renderMessage","Form","children","handleSubmit","useFormikContext","onSubmit","validationSchema","yup","shape","version","required","note","bundle","initialValues","withRouter","history","useState","loading","setLoading","values","a","url","method","data","axios","baseURL","push","Dimmer","active","inverted","Loader","primary","Update","path","component","UpdateForm","render","Main","Menu","Item","header","Grid","columns","Column","width","vertical","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.744b3b35.chunk.js","sourcesContent":["import Dashboard from './page'\nexport default Dashboard\n","import React from 'react'\n\nconst Page: React.FC = () => {\n  return <div data-testid=\"page-dashboard\">dashboard page</div>\n}\n\nexport default Page\n","import React from 'react'\nimport { Table, Button } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\n\nconst UpdateLog: React.FC = () => {\n  return (\n    <div data-testid=\"page-update-log\">\n      <Button as={Link} to=\"/update/create\" data-testid=\"button-create-update\">\n        Create New Update\n      </Button>\n\n      <Table>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>No</Table.HeaderCell>\n            <Table.HeaderCell>Date</Table.HeaderCell>\n            <Table.HeaderCell>Version</Table.HeaderCell>\n            <Table.HeaderCell>Note</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          <Table.Row>\n            <Table.Cell>1</Table.Cell>\n            <Table.Cell>24/01/2020</Table.Cell>\n            <Table.Cell>0.1</Table.Cell>\n            <Table.Cell>Update UI</Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>2</Table.Cell>\n            <Table.Cell>25/01/2020</Table.Cell>\n            <Table.Cell>0.1</Table.Cell>\n            <Table.Cell>Update Text</Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell>3</Table.Cell>\n            <Table.Cell>26/01/2020</Table.Cell>\n            <Table.Cell>0.1</Table.Cell>\n            <Table.Cell>Update Feature</Table.Cell>\n          </Table.Row>\n        </Table.Body>\n      </Table>\n    </div>\n  )\n}\n\nexport default UpdateLog\n","import React from 'react'\nimport { Form, Input } from 'semantic-ui-react'\nimport { useField } from 'formik'\n\ninterface TextFieldProps {\n  label: string\n  name: string\n}\n\nexport const TextField: React.FC<TextFieldProps> = ({ name, label }) => {\n  const [field, meta] = useField({ name })\n  return (\n    <Form.Field\n      id={name}\n      label={label}\n      control={Input}\n      error={meta.error}\n      {...field}\n    ></Form.Field>\n  )\n}\n","import React from 'react'\nimport { Button, Form, Message } from 'semantic-ui-react'\nimport { useField } from 'formik'\n\ninterface FileFieldProps {\n  label: string\n  name: string\n}\n\nconst FileField: React.FC<FileFieldProps> = ({ label, name }) => {\n  const [field, meta, helper] = useField<File>({ name })\n  let inputFile: HTMLInputElement | null = null\n\n  const isError = () => {\n    return meta.error !== undefined\n  }\n\n  const handleButtonClick = () => {\n    inputFile && inputFile.click()\n  }\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = event.target.files && event.target.files[0]\n    helper.setValue(selectedFile!)\n  }\n\n  const renderInput = () => {\n    return (\n      <input\n        id={label}\n        type=\"file\"\n        ref={ref => (inputFile = ref)}\n        hidden\n        onChange={handleFileChange}\n        onBlur={field.onBlur}\n      />\n    )\n  }\n\n  const renderButton = () => {\n    return (\n      <Button\n        type=\"button\"\n        icon=\"upload\"\n        content=\"Choose File\"\n        negative={isError()}\n        basic\n        onClick={handleButtonClick}\n        style={{ marginRight: 10 }}\n      />\n    )\n  }\n\n  const renderMessage = () => {\n    const message = isError() ? meta.error : field.value ? field.value.name : ''\n    return (\n      message && (\n        <Message negative={isError()} compact size=\"tiny\">\n          {message}\n        </Message>\n      )\n    )\n  }\n\n  return (\n    <Form.Field error={isError()}>\n      <label htmlFor={label}>{label}</label>\n      {renderInput()}\n      {renderButton()}\n      {renderMessage()}\n    </Form.Field>\n  )\n}\n\nexport default FileField\n","import React from 'react'\nimport { Form as SemanticForm } from 'semantic-ui-react'\nimport { useFormikContext } from 'formik'\n\nexport const Form: React.FC = ({ children }) => {\n  const { handleSubmit } = useFormikContext()\n  return <SemanticForm onSubmit={handleSubmit}>{children}</SemanticForm>\n}\n","import React, { useState } from 'react'\nimport { TextField, Form } from 'components/formikWrapper'\nimport { UpdateFormValues } from 'interfaces/Update'\nimport { Formik } from 'formik'\nimport * as yup from 'yup'\nimport { Button, Loader, Dimmer } from 'semantic-ui-react'\nimport { callApi } from 'utils/api/callApi'\nimport { withRouter, RouteComponentProps } from 'react-router-dom'\nimport FileField from 'components/formikWrapper/fileField'\n\nconst validationSchema = yup.object().shape({\n  version: yup.string().required(),\n  note: yup.string().required(),\n  bundle: yup.mixed().required()\n})\n\nconst initialValues: UpdateFormValues = {\n  version: '',\n  note: ''\n}\n\nconst UpdateForm: React.FC<RouteComponentProps> = ({ history }) => {\n  const [loading, setLoading] = useState(false)\n\n  const handleSubmit = async (values: UpdateFormValues) => {\n    setLoading(true)\n    await callApi('/update', 'post', values)\n    history.push('/update')\n  }\n\n  const renderForm = () => {\n    return (\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          <TextField name=\"version\" label=\"Version\" />\n          <TextField name=\"note\" label=\"Note\" />\n          <FileField name=\"bundle\" label=\"Bundle\" />\n          <Button type=\"submit\" primary>\n            Submit\n          </Button>\n        </Form>\n      </Formik>\n    )\n  }\n\n  const renderLoading = () => {\n    return (\n      <Dimmer active inverted data-testid=\"loading\">\n        <Loader inverted size=\"medium\">\n          Submitting Update\n        </Loader>\n      </Dimmer>\n    )\n  }\n\n  return (\n    <div data-testid=\"page-update-form\">\n      {loading ? renderLoading() : renderForm()}\n    </div>\n  )\n}\n\nexport default withRouter(UpdateForm)\n","import axios, { Method } from 'axios'\n\nconst baseURL = 'https://code-send.herokuapp.com'\n\nexport function callApi(url: string, method: Method, data?: any) {\n  return axios({\n    baseURL,\n    url,\n    method,\n    data\n  })\n}\n","import Update from './page'\nexport default Update\n","import React from 'react'\nimport { Route, Redirect, Switch } from 'react-router-dom'\nimport UpdateLog from './updateLog'\nimport UpdateForm from './updateForm'\n\nconst Page: React.FC = () => {\n  return (\n    <div data-testid=\"page-update\">\n      <Switch>\n        <Route path=\"/update/log\" component={UpdateLog} />\n        <Route path=\"/update/create\" component={UpdateForm} />\n        <Route render={() => <Redirect to=\"/update/log\" />} />\n      </Switch>\n    </div>\n  )\n}\n\nexport default Page\n","import Main from './page'\nexport default Main\n","import React from 'react'\nimport { Menu, Grid } from 'semantic-ui-react'\nimport { Link, Route, Redirect } from 'react-router-dom'\nimport Dashboard from 'modules/dashboard'\nimport Update from 'modules/update'\n\nconst Page: React.FC = () => {\n  return (\n    <>\n      <Menu>\n        <Menu.Item header>Code Send</Menu.Item>\n      </Menu>\n\n      <Grid columns={2}>\n        <Grid.Column width={3}>\n          <Menu vertical>\n            <Menu.Item\n              as={Link}\n              to=\"/dashboard\"\n              data-testid=\"menu-item-dashboard\"\n            >\n              Dashboard\n            </Menu.Item>\n            <Menu.Item as={Link} to=\"/update\" data-testid=\"menu-item-update\">\n              Update Log\n            </Menu.Item>\n          </Menu>\n        </Grid.Column>\n        <Grid.Column>\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Route path=\"/update\" component={Update} />\n          <Route render={() => <Redirect to=\"/dashboard\" />} />\n        </Grid.Column>\n      </Grid>\n    </>\n  )\n}\n\nexport default Page\n","import React from 'react'\nimport Main from 'modules/main'\nimport { BrowserRouter } from 'react-router-dom'\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Main />\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}