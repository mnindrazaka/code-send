{"version":3,"sources":["utils/api/service.ts","utils/api/codeSendService.ts","hooks/stores/update.tsx","modules/dashboard/index.tsx","modules/dashboard/page.tsx","modules/update/updateLog.tsx","components/formikWrapper/textField.tsx","components/formikWrapper/fileField.tsx","components/formikWrapper/form.tsx","modules/update/updateForm.tsx","modules/update/index.tsx","modules/update/page.tsx","modules/main/index.tsx","modules/main/page.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Service","baseURL","this","res","data","status","message","Promise","reject","endpoint","axios","get","then","handleError","post","put","delete","process","REACT_APP_CODE_SEND_SERVICE_URL","service","update","id","bundle","formData","FormData","append","useUpdate","useState","updates","setUpdates","latestUpdate","setLatestUpdate","loading","setLoading","error","setError","success","setSuccess","Dashboard","useEffect","codeSendService","catch","finally","useGetLatestUpdate","swal","title","icon","text","data-testid","Dimmer","active","inverted","Loader","size","Card","Content","Header","Meta","version","Description","note","UpdateLog","useGetAllUpdate","Button","as","Link","to","primary","Table","Row","HeaderCell","Body","map","index","key","Cell","createdAt","href","bundleUrl","basic","TextField","name","label","useField","field","meta","Field","control","Input","FileField","helper","inputFile","isError","undefined","handleButtonClick","click","handleFileChange","event","selectedFile","target","files","setValue","htmlFor","type","ref","hidden","onChange","onBlur","content","negative","onClick","style","marginRight","value","Message","compact","renderMessage","Form","children","handleSubmit","useFormikContext","onSubmit","validationSchema","yup","shape","required","initialValues","UpdateForm","history","useHistory","createUpdate","a","rest","_id","useCreateUpdate","push","Update","path","component","render","Main","Menu","Item","header","Grid","columns","Column","width","vertical","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45aad343.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\n\nexport default class Service {\n  baseURL: string;\n\n  constructor(baseURL: string) {\n    this.baseURL = baseURL;\n  }\n\n  private handleError(res: AxiosResponse) {\n    const { status, message } = res.data;\n    return status === \"error\" ? Promise.reject(message) : res;\n  }\n\n  public get(endpoint: string) {\n    return axios\n      .get(this.baseURL + endpoint)\n      .then(this.handleError)\n      .then(res => res.data);\n  }\n\n  public post(endpoint: string, data: any) {\n    return axios\n      .post(this.baseURL + endpoint, data)\n      .then(this.handleError)\n      .then(res => res.data);\n  }\n\n  public put(endpoint: string, data: any) {\n    return axios\n      .put(this.baseURL + endpoint, data)\n      .then(this.handleError)\n      .then(res => res.data);\n  }\n\n  public delete(endpoint: string) {\n    return axios\n      .delete(this.baseURL + endpoint)\n      .then(this.handleError)\n      .then(res => res.data);\n  }\n}\n","import { UpdateFormValues } from \"interfaces/Update\";\nimport Service from \"./service\";\n\nconst baseURL = process.env.REACT_APP_CODE_SEND_SERVICE_URL as string;\nconst service = new Service(baseURL);\n\nconst getAllUpdates = () => {\n  return service.get(\"/update\");\n};\n\nconst getLatestUpdate = () => {\n  return service.get(\"/update/latest\");\n};\n\nconst createUpdate = (update: UpdateFormValues) => {\n  return service.post(\"/update\", update);\n};\n\nconst uploadUpdate = (id: string, bundle: Blob) => {\n  const formData = new FormData();\n  formData.append(\"bundle\", bundle);\n  return service.put(`/update/${id}/bundle`, formData);\n};\n\nexport default {\n  baseURL,\n  getAllUpdates,\n  getLatestUpdate,\n  createUpdate,\n  uploadUpdate\n};\n","import { useState, useEffect } from \"react\";\nimport { Update, UpdateFormValues } from \"interfaces/Update\";\nimport codeSendService from \"utils/api/codeSendService\";\n\nconst useUpdate = () => {\n  const [updates, setUpdates] = useState<Update[]>([]);\n  const [latestUpdate, setLatestUpdate] = useState<Update>();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string>();\n  const [success, setSuccess] = useState<boolean>(false);\n\n  return {\n    updates,\n    setUpdates,\n    latestUpdate,\n    setLatestUpdate,\n    loading,\n    setLoading,\n    error,\n    setError,\n    success,\n    setSuccess\n  };\n};\n\nexport const useGetAllUpdate = () => {\n  const {\n    setUpdates,\n    setLoading,\n    setError,\n    setSuccess,\n    updates,\n    loading,\n    error,\n    success\n  } = useUpdate();\n\n  useEffect(() => {\n    setLoading(true);\n    codeSendService\n      .getAllUpdates()\n      .then(updates => {\n        setUpdates(updates);\n        setSuccess(true);\n      })\n      .catch(error => setError(error.message))\n      .finally(() => setLoading(false));\n  }, [setUpdates, setLoading, setError, setSuccess]);\n\n  return { updates, loading, error, success };\n};\n\nexport const useGetLatestUpdate = () => {\n  const {\n    setLatestUpdate,\n    setLoading,\n    setError,\n    setSuccess,\n    latestUpdate,\n    loading,\n    error,\n    success\n  } = useUpdate();\n\n  useEffect(() => {\n    setLoading(true);\n    codeSendService\n      .getLatestUpdate()\n      .then(update => {\n        setLatestUpdate(update);\n        setSuccess(true);\n      })\n      .catch(error => setError(error.message))\n      .finally(() => setLoading(false));\n  }, [setLatestUpdate, setLoading, setError, setSuccess]);\n\n  return { latestUpdate, loading, error, success };\n};\n\nexport const useCreateUpdate = () => {\n  const {\n    setLoading,\n    setError,\n    setSuccess,\n    loading,\n    error,\n    success\n  } = useUpdate();\n\n  const createUpdate = async ({ bundle, ...rest }: UpdateFormValues) => {\n    try {\n      setLoading(true);\n      const { _id } = await codeSendService.createUpdate(rest);\n      await codeSendService.uploadUpdate(_id, bundle!);\n      setSuccess(true);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    createUpdate,\n    loading,\n    error,\n    success\n  };\n};\n","import Dashboard from \"./page\";\nexport default Dashboard;\n","import React from \"react\";\nimport { Card, Dimmer, Loader } from \"semantic-ui-react\";\nimport { useGetLatestUpdate } from \"hooks/stores/update\";\nimport swal from \"sweetalert\";\n\nconst Page: React.FC = () => {\n  const { latestUpdate, loading, error } = useGetLatestUpdate();\n\n  const renderData = () => {\n    return (\n      <Card>\n        <Card.Content>\n          <Card.Header>Latest Update</Card.Header>\n          <Card.Meta>{latestUpdate?.version}</Card.Meta>\n          <Card.Description>{latestUpdate?.note}</Card.Description>\n        </Card.Content>\n      </Card>\n    );\n  };\n\n  const renderLoading = () => {\n    return (\n      <Dimmer active inverted>\n        <Loader inverted size=\"medium\">\n          Getting Update\n        </Loader>\n      </Dimmer>\n    );\n  };\n\n  if (error) {\n    swal({\n      title: \"Failed\",\n      icon: \"error\",\n      text: error\n    });\n  }\n\n  return (\n    <div data-testid=\"page-dashboard\">\n      {loading ? renderLoading() : renderData()}\n    </div>\n  );\n};\n\nexport default Page;\n","import React from \"react\";\nimport { Table, Button, Dimmer, Loader } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { useGetAllUpdate } from \"hooks/stores/update\";\nimport swal from \"sweetalert\";\n\nconst UpdateLog: React.FC = () => {\n  const { updates, loading, error } = useGetAllUpdate();\n\n  const renderData = () => {\n    return updates.map((update, index) => (\n      <Table.Row key={index}>\n        <Table.Cell>{index + 1}</Table.Cell>\n        <Table.Cell>{update.createdAt}</Table.Cell>\n        <Table.Cell>{update.version}</Table.Cell>\n        <Table.Cell>{update.note}</Table.Cell>\n        <Table.Cell>\n          <Button as=\"a\" href={update.bundleUrl} basic>\n            Download\n          </Button>\n        </Table.Cell>\n      </Table.Row>\n    ));\n  };\n\n  const renderTable = () => {\n    return (\n      <Table>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>No</Table.HeaderCell>\n            <Table.HeaderCell>Date</Table.HeaderCell>\n            <Table.HeaderCell>Version</Table.HeaderCell>\n            <Table.HeaderCell>Note</Table.HeaderCell>\n            <Table.HeaderCell>Action</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body data-testid=\"table-body-update-log\">\n          {renderData()}\n        </Table.Body>\n      </Table>\n    );\n  };\n\n  const renderLoading = () => {\n    return (\n      <Dimmer active inverted>\n        <Loader inverted size=\"medium\">\n          Getting Update\n        </Loader>\n      </Dimmer>\n    );\n  };\n\n  if (error) {\n    swal({\n      title: \"Failed\",\n      icon: \"error\",\n      text: error\n    });\n  }\n\n  return (\n    <div data-testid=\"page-update-log\">\n      <Button\n        as={Link}\n        to=\"/update/create\"\n        primary\n        data-testid=\"button-create-update\"\n      >\n        Create New Update\n      </Button>\n      {loading ? renderLoading() : renderTable()}\n    </div>\n  );\n};\n\nexport default UpdateLog;\n","import React from \"react\";\nimport { Form, Input } from \"semantic-ui-react\";\nimport { useField } from \"formik\";\n\ninterface TextFieldProps {\n  label: string;\n  name: string;\n}\n\nexport const TextField: React.FC<TextFieldProps> = ({ name, label }) => {\n  const [field, meta] = useField({ name });\n  return (\n    <Form.Field\n      id={name}\n      label={label}\n      control={Input}\n      error={meta.error}\n      {...field}\n    ></Form.Field>\n  );\n};\n","import React from \"react\";\nimport { Button, Form, Message } from \"semantic-ui-react\";\nimport { useField } from \"formik\";\n\ninterface FileFieldProps {\n  label: string;\n  name: string;\n}\n\nexport const FileField: React.FC<FileFieldProps> = ({ label, name }) => {\n  const [field, meta, helper] = useField<File>({ name });\n  let inputFile: HTMLInputElement | null = null;\n\n  const isError = () => {\n    return meta.error !== undefined;\n  };\n\n  const handleButtonClick = () => {\n    inputFile && inputFile.click();\n  };\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = event.target.files && event.target.files[0];\n    helper.setValue(selectedFile!);\n  };\n\n  const renderInput = () => {\n    return (\n      <input\n        id={label}\n        type=\"file\"\n        ref={ref => (inputFile = ref)}\n        hidden\n        onChange={handleFileChange}\n        onBlur={field.onBlur}\n      />\n    );\n  };\n\n  const renderButton = () => {\n    return (\n      <Button\n        type=\"button\"\n        icon=\"upload\"\n        content=\"Choose File\"\n        negative={isError()}\n        basic\n        onClick={handleButtonClick}\n        style={{ marginRight: 10 }}\n      />\n    );\n  };\n\n  const renderMessage = () => {\n    const message = isError()\n      ? meta.error\n      : field.value\n      ? field.value.name\n      : \"\";\n    return (\n      message && (\n        <Message negative={isError()} compact size=\"tiny\">\n          {message}\n        </Message>\n      )\n    );\n  };\n\n  return (\n    <Form.Field error={isError()}>\n      <label htmlFor={label}>{label}</label>\n      {renderInput()}\n      {renderButton()}\n      {renderMessage()}\n    </Form.Field>\n  );\n};\n","import React from \"react\";\nimport { Form as SemanticForm } from \"semantic-ui-react\";\nimport { useFormikContext } from \"formik\";\n\nexport const Form: React.FC = ({ children }) => {\n  const { handleSubmit } = useFormikContext();\n  return <SemanticForm onSubmit={handleSubmit}>{children}</SemanticForm>;\n};\n","import React from \"react\";\nimport { TextField, Form, FileField } from \"components/formikWrapper\";\nimport { UpdateFormValues } from \"interfaces/Update\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport { Button, Loader, Dimmer } from \"semantic-ui-react\";\nimport swal from \"sweetalert\";\nimport { useHistory } from \"react-router\";\nimport { useCreateUpdate } from \"hooks/stores/update\";\n\nconst validationSchema = yup.object().shape({\n  version: yup.string().required(),\n  note: yup.string().required(),\n  bundle: yup.mixed().required()\n});\n\nconst initialValues: UpdateFormValues = {\n  version: \"\",\n  note: \"\"\n};\n\nconst UpdateForm: React.FC = () => {\n  const history = useHistory();\n  const { createUpdate, loading, error, success } = useCreateUpdate();\n\n  const renderForm = () => {\n    return (\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={createUpdate}\n      >\n        <Form>\n          <TextField name=\"version\" label=\"Version\" />\n          <TextField name=\"note\" label=\"Note\" />\n          <FileField name=\"bundle\" label=\"Bundle\" />\n          <Button type=\"submit\" primary>\n            Submit\n          </Button>\n        </Form>\n      </Formik>\n    );\n  };\n\n  const renderLoading = () => {\n    return (\n      <Dimmer active inverted>\n        <Loader inverted size=\"medium\">\n          Submitting Update\n        </Loader>\n      </Dimmer>\n    );\n  };\n\n  if (error) {\n    swal({\n      title: \"Failed\",\n      icon: \"error\",\n      text: error\n    });\n  }\n\n  if (success) {\n    swal({\n      title: \"Success\",\n      icon: \"success\",\n      text: \"Create update success\"\n    });\n    history.push(\"/update\");\n  }\n\n  return (\n    <div data-testid=\"page-update-form\">\n      {loading ? renderLoading() : renderForm()}\n    </div>\n  );\n};\n\nexport default UpdateForm;\n","import Update from \"./page\";\nexport default Update;\n","import React from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport UpdateLog from \"./updateLog\";\nimport UpdateForm from \"./updateForm\";\n\nconst Page: React.FC = () => {\n  return (\n    <div data-testid=\"page-update\">\n      <Switch>\n        <Route path=\"/update/log\" component={UpdateLog} />\n        <Route path=\"/update/create\" component={UpdateForm} />\n        <Route render={() => <Redirect to=\"/update/log\" />} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default Page;\n","import Main from \"./page\";\nexport default Main;\n","import React from \"react\";\nimport { Menu, Grid } from \"semantic-ui-react\";\nimport { Link, Route, Redirect } from \"react-router-dom\";\nimport Dashboard from \"modules/dashboard\";\nimport Update from \"modules/update\";\n\nconst Page: React.FC = () => {\n  return (\n    <>\n      <Menu>\n        <Menu.Item header>Code Send</Menu.Item>\n      </Menu>\n\n      <Grid columns={2}>\n        <Grid.Column width={3}>\n          <Menu vertical>\n            <Menu.Item\n              as={Link}\n              to=\"/dashboard\"\n              data-testid=\"menu-item-dashboard\"\n            >\n              Dashboard\n            </Menu.Item>\n            <Menu.Item as={Link} to=\"/update\" data-testid=\"menu-item-update\">\n              Update Log\n            </Menu.Item>\n          </Menu>\n        </Grid.Column>\n        <Grid.Column>\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Route path=\"/update\" component={Update} />\n          <Route render={() => <Redirect to=\"/dashboard\" />} />\n        </Grid.Column>\n      </Grid>\n    </>\n  );\n};\n\nexport default Page;\n","import React from \"react\";\nimport Main from \"modules/main\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nconst App: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Main />\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}